[["index.html", "Mastering Shiny Book Club Welcome", " Mastering Shiny Book Club The R4DS Online Learning Community 2022-05-15 Welcome This is a companion for the book Mastering Shiny by Hadley Wickham. This companion is available at r4ds.io/mshiny. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book. This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. "],["preface.html", "Preface", " Preface The preface chapter will not be studied as part of the book-club. It provides an overview of the purpose of shiny, a brief description of the main components of a shiny app and an introduction to reactive programming. All these ideas are studied in more detail in the later chapters (hence, why we’ve skipped it). There are some notes on setting up R/RStudio for developing shiny apps, on the packages that should be installed, and some pointers about deploying shiny apps. When shiny-apps are developed as part of the book-club, we will typically deploy them to the R4DS shinyapps.io account. shinyapps.io has a lot of detail on releasing shiny-apps to the world. If you have any questions / problems setting up shiny for local use, or with deployment of a shiny app to shinyapps.io, feel free to ask in either the “book_club-mastering_shiny” or the “help-4-shiny” channel on the R4DS slack. "],["your-first-shiny-app.html", "Chapter 1 Your first Shiny app", " Chapter 1 Your first Shiny app Learning objectives: Learn how to create a simple Shiny app Define the leanest version of an app you can build Review different ways to start and stop the app Identify the two key components of every Shiny app Understand how the two components are connected Observe how Shiny apps react to user input "],["introduction.html", "1.1 Introduction", " 1.1 Introduction This chapter is basically a quick demo of the minimum boilerplate needed for a Shiny app. It defines the two key components - the ui and the server Then introduces reactive programming - which is how shiny automatically updates outputs when inputs change. Shiny outputs (tables, charts etc.) can automatically react (recalculate) when their inputs change. 1.1.1 If you haven’t installed Shiny already: install.packages(&#39;shiny&#39;) Check you have version 1.5.0 or higher packageVersion(&quot;shiny&quot;) ## [1] &#39;1.7.1&#39; Load shiny library(&#39;shiny&#39;) "],["creating-an-app.html", "1.2 Creating an app", " 1.2 Creating an app Simplest way - create new directory for your app and add a single app.r file library(shiny) ui &lt;- fluidPage( &quot;Hello, world!&quot; ) server &lt;- function(input, output, session) { } shinyApp(ui, server) Looking closely at the code above, this app.r file does four things: Loads shiny Defines the ui - the HTML webpage humans interact with Specifies behaviour of the app in the server Executes shinyApp(ui, server) to construct and start the app "],["running-and-stopping-the-app.html", "1.3 Running and stopping the app", " 1.3 Running and stopping the app The basic workflow of shiny app development is… Write some code Start the app Play with the app Write some more code Repeat… A simple diagram of the Shiny development process. 1.3.1 Running the app There are a few ways you can run your app If using R Studio: Click Run App button in document toolbar Keyboard shortcut is CMD / CTRL + SHIFT + ENTER If not using R Studio: (source()) the whole document or call shiny::runApp() The console message #&gt; Listening on http://127.0.0.1:3827 identifies your app in any (local) web browser. 127.0.0.1 is a standard address = this computer last 4 digits = randomly assigned port number Running a Shiny app keeps R busy and you will not be able to execute other commands in the console at that time. 1.3.2 Stopping the app: STOP sign on console toolbar ESC from within R console (CTRL + C is not in R Studio) Close shiny app window "],["adding-ui-controls.html", "1.4 Adding UI controls", " 1.4 Adding UI controls Replace the ui in your app with this code that shows you all the built-in data frames in the datasets package. ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, label = &quot;Dataset&quot;, choices = ls(&quot;package:datasets&quot;)), verbatimTextOutput(&quot;summary&quot;), tableOutput(&quot;table&quot;) ) Four new functions: fluidPage() - layout function to set up visual structure of page selectInput() - input control for user to interact with verbatimTextOutput() - output control - shows code result tableOutput() - output control - displays tables These are all just ways to generate HTML Run the following in the console to see the outputted html: selectInput(&quot;dataset&quot;, label = &quot;Dataset&quot;, choices = ls(&quot;package:datasets&quot;)) Open the app in the browser, right click on page &gt;&gt; select inspect to see the html. Note: fluidPage() is just one option available for page setup. navBarPage() is a nice example for creating an app with page tabs. You can see an example of the use of navBarPage() here. "],["adding-behaviour.html", "1.5 Adding behaviour", " 1.5 Adding behaviour Need server function to bring the outputs to life Reactive programming tells Shiny how to perform a function. It’s the difference between giving someone a recipe versus demanding that they go make you a sandwich. ~ Hadley Wickham (Author of Mastering Shiny) Your coding the range of app behaviors, but the user of your app demands the output based on their selection of input(s). This code tells shiny how to fill in the summary and table outputs we defined in the UI. server &lt;- function(input, output, session) { output$summary &lt;- renderPrint({ dataset &lt;- get(input$dataset, &quot;package:datasets&quot;) summary(dataset) }) output$table &lt;- renderTable({ dataset &lt;- get(input$dataset, &quot;package:datasets&quot;) dataset }) } Each output$out_id is a new shiny output to render where the UI defines it There are specific render functions render{Type} for different outputs: text tables plots images new ui components "],["reactive-expressions.html", "1.6 Reactive expressions", " 1.6 Reactive expressions Key part of reducing duplication and ensuring you D-R-Y (Don’t-Repeat-Yourself) Duplicated code is particularly bad for Shiny apps which can get cumbersome and more difficult to maintain and debug as they grow (Although the latest release of shiny does have some improved debugging tools) Reactive expressions combines some of the same logic as variables and functions, but is a bit different as these do not work the same in shiny as normal R programming. Create a reactive expression by wrapping a block of code in reactive({...}) and assigning it to a variable. You can use the reactive expression like a standard function with one important difference - it only runs once and caches the result until the input is changed. So once it is initialised it will return some form of constant until it’s updated again. The below code retrieves the dataset once, not twice server &lt;- function(input, output, session) { # Create a reactive expression dataset &lt;- reactive({ get(input$dataset, &quot;package:datasets&quot;) }) output$summary &lt;- renderPrint({ # Use a reactive expression by calling it like a function summary(dataset()) }) output$table &lt;- renderTable({ dataset() }) } "],["visualising-reactive-expressions.html", "1.7 Visualising reactive expressions", " 1.7 Visualising reactive expressions The flow visualised in 2.1 now has a middle layer - a reactive expression. Which lives in the server function of the app. The ui to server connections can be visualised like this: Using our ‘first app’ as an example: A good way to see this in action is to use Shiny’s showcase mode: runApp(&quot;examples/01-your_first_shiny_app/app-data-example-final.R&quot;, display.mode = &quot;showcase&quot;) You can read more about the different Shiny display modes here. "],["shiny-resources.html", "1.8 Shiny resources", " 1.8 Shiny resources Shiny cheatsheet https://www.rstudio.com/resources/cheatsheets/ 1.8.1 Other resources Shiny Gallery has lots of inspiration and demos of specific ui components and server behaviours. https://shiny.rstudio.com/gallery/ Shiny Widgets Gallery is included in above link and introduces the main options for inputs in the ui. https://shiny.rstudio.com/gallery/widget-gallery.html Shiny Dashboard is a nice framework for creating good looking and well structured apps with minimal effort. May get limiting as you advance and want more customisation. https://rstudio.github.io/shinydashboard/index.html "],["meeting-videos.html", "1.9 Meeting Videos", " 1.9 Meeting Videos 1.9.1 Cohort 1 Meeting chat log 00:34:30 Tan Ho: (there are ways to get access to the R console!) 00:34:43 shamsuddeen: ? 00:35:13 Tan Ho: specifically re: Jerome&#39;s comment about R console being locked while an app is running 00:36:17 shamsuddeen: Ok. How can one access it ? 00:37:06 Tan Ho: probably a talk on its own 00:38:03 shamsuddeen: -:) I see !!! 00:38:40 Tan Ho: I might be able to do a presentation on debugging shiny a bit later in the bookclub 00:38:47 Tan Ho: I actually don&#39;t see a chapter on it... 00:39:18 shamsuddeen: Yaaaayyy Tan. That would be cool !! 00:41:36 Dave: Chapter 6.2 is about debugging 00:42:20 Tan Ho: Ah! 00:42:26 Arnab Dey (he/him): Do we have to define the ui before the server? The order seems a bit counter-intuitive 00:42:58 Tan Ho: arnab - it&#39;s not necessary but it&#39;s convention in shiny apps 00:43:16 Arnab Dey (he/him): got it! 00:43:46 shamsuddeen: Can you write shiny app in Rmarkdown? 00:45:32 priyanka gagneja: yes shamshudeen you can 00:45:56 shamsuddeen: Thanks Priyanka 00:52:17 Jessica Mukiri: Has anyone had a go at the exercises? 00:52:51 Russ Hyde: Have you a question about the exercises? 00:55:26 Jessica Mukiri: Question 4 for on the reactive expression 01:02:50 Federica Gazzelloni: thanks 01:02:57 Sarah Rathwell: Thanks 1.9.2 Cohort 2 Meeting chat log # Meeting 2021-07-28 00:15:20 Ola: you are on mute 00:30:25 Ola: it sounds like you need to setup your ssh key 00:30:27 Ola: https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent 00:31:11 Conor Tompkins: RStudio sort of combines git add and git commit. 00:36:19 Ola: yes 00:46:54 Conor Tompkins: It would be interesting to know whether you can use a port number below 1023. Those are reserved for specific uses 00:48:15 Ola: You can assign an application a port number. 00:48:58 Ola: There are some default ports for certain applications like postgres I think its like port 5410 … don&#39;t quote me on that 00:49:45 Ryan Metcalf: Many APIs utilize particular ports when communicating to different servers. Redis, Postgres, SQLServer, etc… 00:49:52 Ryan Metcalf: HTML by default is 80 or 8080. 00:50:17 Ryan Metcalf: SSH, FTP, SFTP, are 21, 22, 23, etc… 00:51:35 Eileen: Shiny:: cheat sheet 00:54:43 Ola: Maybe we should have a debugging zoom party one of these days 1.9.3 Cohort 3 Meeting chat log 00:06:57 Njoki Njuki Lucy: https://docs.google.com/spreadsheets/d/1YnFBY5nwSFoQuryPXtfmoguVbE4sIrjP_LhRLSZM8dc/edit#gid=0 00:17:24 Ryan Metcalf: https://github.com/r4ds/bookclub-mshiny 00:23:57 Njoki Njuki Lucy: https://docs.google.com/spreadsheets/d/1YnFBY5nwSFoQuryPXtfmoguVbE4sIrjP_LhRLSZM8dc/edit?usp=sharing 00:35:56 Njoki Njuki Lucy: https://mastering-shiny.org/ 00:36:22 Ryan Metcalf: `git branch &lt;repo name&gt; # create branch 00:37:35 Ryan Metcalf: Forgive me, let me edit that line of code: `git remote add [name_of_your_remote] [name_of_your_new_branch]` 00:48:02 Mohit Soni: Hi All, I’m Mohit, logging in from India, I work with R in Supply Chain forecasting. Excited to meet fellow learners and learn together. 00:59:43 Njoki Njuki Lucy: https://docs.google.com/spreadsheets/d/1YnFBY5nwSFoQuryPXtfmoguVbE4sIrjP_LhRLSZM8dc/edit?usp=sharing 01:00:14 Ryan Metcalf: https://docs.google.com/spreadsheets/d/1YnFBY5nwSFoQuryPXtfmoguVbE4sIrjP_LhRLSZM8dc/edit#gid=0 Meeting chat log 00:24:22 Ryan Metcalf: https://www.rstudio.com/about/platform-support/ 00:58:04 Ryan Metcalf: Lucy’s Cohort Signup Sheet: https://docs.google.com/spreadsheets/d/1YnFBY5nwSFoQuryPXtfmoguVbE4sIrjP_LhRLSZM8dc/edit#gid=0 "],["shiny---basic-user-interface.html", "Chapter 2 Shiny - Basic User Interface ", " Chapter 2 Shiny - Basic User Interface "],["learning-objectives.html", "2.1 Learning objectives", " 2.1 Learning objectives The Shiny User Interface consists of 3 components Inputs Text, Numeric variables, Dates, Radio buttons/Check boxes, File uploads, Buttons Outputs Text, Tables, Plots, Downloads Layout functions Pages with sidebar(s) &amp; mainPanel(s), Bootstrap, Tabsets, Themes, CSS grid "],["fyi.html", "2.2 FYI", " 2.2 FYI Mastering Shiny online book: https://mastering-shiny.org Mastering Shiny Github-repo: https://github.com/hadley/mastering-shiny By using Github, YOU can contribute too. R4DS book club Github-repo: https://github.com/r4ds/bookclub-mshiny Shiny Cheat Sheet https://shiny.rstudio.com/articles/cheatsheet.html "],["the-shiny-basic-user-interfaceui.html", "2.3 The Shiny Basic User Interface(ui)", " 2.3 The Shiny Basic User Interface(ui) Recall, the simplest Shiny application has 2 components, ui &amp; server user interface contains nested R functions that assist in assembling the HTML. library(shiny) user_interface &lt;- fluidPage( **inputId** ) ## WE&#39;LL FOCUS HERE FIRST server &lt;- function(input, output, session) { } ## FOCUS HERE SECONDARILY shinyApp(ui = user_interface, server = server) Naming; inputId has 2 constraints inputId contain Only Letters, Numbers, and Underscores NO / -.!@#$%^&amp;*;: NO slashes, dashes, Nor special characters, inputID must be unique. "],["what-can-one-input.html", "2.4 What Can One INPUT?", " 2.4 What Can One INPUT? Text strings Numeric variables Dates Limited choices; Radio buttons/Check boxes/Select-dropdown menus File uploads Action buttons ## General Command Form #---------------------- Input-Command(inputId = &quot;string1&quot;, ## Don&#39;t forget tab completion &amp; F1. label = &quot;string2&quot;, ### Situation Dependent Variables ### value = # Initial value min = 0, max = 100, width = &#39;400px&#39;, height = &#39;100%&#39;, cols = 2, rows = 5, # Number of cols or rows to display placeholder = &quot;A word giving the user a hint&quot;, resize # Resize to fill/contract span ) "],["input-1---text-numeric.html", "2.5 Input 1 - Text &amp; Numeric", " 2.5 Input 1 - Text &amp; Numeric Every output (in the UI) is coupled with a render (in the server). ui &lt;- fluidPage( ## Text Input ## textInput(inputId = &quot;f_name&quot;, label = &quot;First name?&quot;), textInput(inputId = &quot;name&quot;, placeholder = &quot;What&#39;s your name?&quot;), passwordInput(inputId = &quot;password&quot;, label = &quot;What&#39;s your password?&quot;), textAreaInput(inputId = &quot;story&quot;, label = &quot;Tell me about yourself&quot;, rows = 3) ## Numeric inputs ## numericInput(inputId = &quot;x&quot;, label = &quot;Dependent Variable&quot;, value = 10), sliderInput(inputID = &quot;y_range&quot;, label = &quot;Range of Y:&quot;, value = c(10, 20), min = 0, max = 100) ) But wait there’s more! "],["inputs-2---dates-limited-choices-file-uploads-action-buttons.html", "2.6 Inputs 2 - Dates, Limited choices, File uploads, Action buttons", " 2.6 Inputs 2 - Dates, Limited choices, File uploads, Action buttons ui &lt;- fluidPage( # DATES dateInput(&quot;dob&quot;, &quot;When were you born?&quot;), dateRangeInput(&quot;holiday&quot;, &quot;Give start and end of Holiday season?&quot;), # LIMITED CHOICES animals &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;porpoise&quot;) ## Placed above UI radioButtons(&quot;animal&quot;, &quot;What&#39;s your favourite animal?&quot;, animals) state_name &lt;- c(&quot;AL&quot;, &quot;AK&quot;, ..., &quot;WY&quot;) ## Placed above UI selectInput(&quot;state&quot;, &quot;What&#39;s your favourite state?&quot;, state_name), # FILE UPLOADS fileInput(&quot;upload&quot;, NULL) # ACTION BUTTONS actionButton(&quot;click&quot;, &quot;Click me!&quot;), actionButton(&quot;calc_boolean&quot;, &quot;Calculate!&quot;, icon = icon(&quot;computer&quot;)) ) "],["what-can-one-output.html", "2.7 What can one OUTPUT?", " 2.7 What can one OUTPUT? Text Tables Plots Downloads Text Every output (in the UI) is coupled with a render (in the server). Note that there are two render functions which behave slightly differently: renderText() &lt;-&gt; textOutput() renderPrint() &lt;-&gt; verbatimTextOutput() ## User Interface #---------------- ui &lt;- fluidPage( # Static TEXT textOutput(&quot;Hello Friend&quot;), verbatimTextOutput(&quot;SSN&quot;) ) ## Server Section #---------------- server &lt;- function(input, output, session) { # Varible TEXT output$text &lt;- renderText( animals ), output$code &lt;- renderPrint({ ## Curly brackets needed IF state_name ## commands require multiple lines, print(&quot;OK&quot;) }), } "],["outputs-2---tables.html", "2.8 Outputs 2 - Tables", " 2.8 Outputs 2 - Tables NOTE: There are two options for displaying data frames in tables: tableOutput() &lt;-&gt; renderTable() for static tables, dataTableOutput() &lt;-&gt; renderDataTable() for dynamic tables # In UI section tableOutput(df_static), dataTableOutput(df_dynamic), # In SERVER section renderTable(df_static) renderDataTable(df_dynamic) "],["outputs-3---plots-downloads.html", "2.9 Outputs 3 - Plots, Downloads", " 2.9 Outputs 3 - Plots, Downloads plotOutput() &lt;-&gt; renderPlot() # PLOTS # In UI section plotOutput(&quot;plot&quot;, width = &quot;400px&quot;) # In SERVER section output$plot &lt;- renderPlot(plot(1:5), res = 96), # DOWNLOADS # downloadButton(&quot;downloadData&quot;, &quot;Download&quot;) # Download button; # requires new techniques in the server function, # so we’ll come back to that in Chapter 9. "],["layouts.html", "2.10 Layouts", " 2.10 Layouts Consider Using: 1. Bootstrap, 2. Page(s) with sidebar(s) &amp; mainPanel(s) 3. CSS Grid (12 columns) 4. Tabsets 5. Themes Example of Sidepanel and Mainpanel fluidPage( titlePanel(&quot;Hello Shiny!&quot;), sidebarLayout( sidebarPanel( ## sidebar sliderInput(&quot;obs&quot;, &quot;Observations:&quot;, min = 0, max = 1000, value = 500) ), mainPanel( ## mainPanel plotOutput(&quot;distPlot&quot;) ) ) ) "],["under-the-hood.html", "2.11 Under the hood", " 2.11 Under the hood Use HTML or CSS to get the job done! &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;form-group shiny-input-container&quot;&gt; &lt;label for=&quot;name&quot;&gt;What&#39;s your name?&lt;/label&gt; &lt;input id=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;&quot;/&gt; &lt;/div&gt; &lt;/div&gt; "],["other-tools-material.html", "2.12 Other tools &amp; material", " 2.12 Other tools &amp; material awesome-shiny-extensions listing by Nan Xiao shinyWidgets shiny.semantic shinyMobile shinymaterial shinydashboard NOTE: Some tools may need devtools to install from GitHub repos. Books: Engineering Production-Grade Shiny Apps Outstanding User Interfaces with Shiny "],["summary.html", "2.13 Summary", " 2.13 Summary Chapter 3: Basic UI introduces the 3 components of user interface for Shiny Inputs; Text, Numeric variables, Dates, Limited choices, Radio buttons/Check boxes, File uploads, Buttons renderText() &lt;-&gt; textOutput() renderPrint() &lt;-&gt; verbatimTextOutput() Outputs; Text, Tables, Plots, Downloads tableOutput() &lt;-&gt; renderTable() for static tables dataTableOutput() &lt;-&gt; renderDataTable() for dynamic tables plotOutput() &lt;-&gt; renderPlot() Layout functions; Pages with sidebar(s) &amp; mainPanel(s), Bootstrap, Tabsets, Themes, CSS "],["meeting-videos-1.html", "2.14 Meeting Videos", " 2.14 Meeting Videos 2.14.1 Cohort 1 Meeting chat log 00:05:13 mattc: Greetings all. 00:08:43 Robert Overman: So this is a cameras on meeting then 00:08:51 Russ Hyde: Hi 00:09:20 matt curcio: Greetings all 00:09:32 Anne Hoffrichter: Hello :) 00:11:25 Jessica Mukiri: Hi everyone :-) 00:11:34 priyanka gagneja: hello 00:18:16 Robert Overman: Just so I&#39;m not missing it, we can&#39;t see Chapter 3 in the Mastering Shiny Book Club site (that Matt is currently going over), correct? 00:19:05 Russ Hyde: Robert. Matt&#39;s file hasn&#39;t been uploaded to the book club site yet 00:19:20 Robert Overman: Thanks 00:19:20 Russ Hyde: We&#39;ll get it up within the next couple of days 00:36:51 shamsuddeen: Thanks for answering the question 00:40:00 Scott Nestler: BTW, rainbow parenthesis are now available in RStudio 1.4 without a separate package. But you have to go to Tools, Global Options, Code, Display to turn them on. They are off by default. 00:43:47 DJpoTECeV47CcLoYwgAAEAAAAMwJjIDW/OiBd3S3j4ddb9SWUdUic/CK8oEvNdSPXXiO: Shiny dashboard uses fluidRow and has a good explainer that was helpful for me https://rstudio.github.io/shinydashboard/structure.html#layouts 00:45:33 Jessica Mukiri: sorry have to leave now, will finish watching this from the recording. Thanks for the presentation. See you next week 00:46:33 Russ Hyde: Thanks for coming Jessica 00:47:32 Anne Hoffrichter: I also have to run. Thanks! Have a nice evening! 00:52:17 Arnab Dey (he/him): New to Shiny 00:53:57 Robert Overman: I&#39;ve been using it for the past 4 years 01:00:12 Russ Hyde: Matt&#39;s asking about everyone&#39;s background / business 01:00:22 Arnab Dey (he/him): Research / Public Health 01:00:27 Sarah Rathwell: Math, healthcare 01:00:27 Scott Nestler: Operations Research / Statistics / Business Analytics / Government / Higher Education 01:00:37 Russ Hyde: Bioinformatics (hopefully datascience soon) 01:00:46 Dave: Life Insurance 01:01:19 Morgan Grovenburg: Institutional Research 01:08:00 Scott Nestler: That&#39;s where it get really interesting. (with reactivity) 01:08:23 Russ Hyde: Bye 2.14.2 Cohort 2 Meeting chat log 00:37:21 Conor Tompkins: It is the “sep” argument in sliderInput 00:37:37 Conor Tompkins: sep = “” 00:37:46 Collin Berke: Thanks @Conor Tompkins 00:44:36 Ryan Metcalf: Timevis 00:50:16 Zaynaib Giwa, @zaynaib: MVC 00:50:23 Zaynaib Giwa, @zaynaib: Model, View Controller 00:50:58 Zaynaib Giwa, @zaynaib: Its an old school developer pattern. I don&#39;t know if its still used in the industry anymore 00:58:25 Zaynaib Giwa, @zaynaib: good to know 00:59:03 Collin Berke: Thanks, Ola 2.14.3 Cohort 3 Meeting chat log 00:11:45 Ryan Metcalf: https://appsilon.com/shiny-conference/ 01:09:37 Njoki Njuki Lucy: I had the same question 😄 "],["basic-reactivity.html", "Chapter 3 Basic Reactivity", " Chapter 3 Basic Reactivity Learning objectives: Explain in more detail how the input and output arguments work. Differentiate between imperative vs. declarative programming. Describe the basics of reactivity (inputs are directly connected to outputs). Apply reactive expressions to eliminate duplicated work. "],["recap.html", "3.1 Recap", " 3.1 Recap 3.1.1 Important Learnings so far, main app components: Front end - the ui object contains the HTML presented to every user of your app. is simple because every user gets the same HTML. Back end - the server object is more complicated because every user needs to get an independent version of the app (when user A modifies an input field, user B shouldn’t see their outputs change). creates a new environment for each run, giving each session to have a unique state. "],["a-deeper-dive-into-the-server-function.html", "3.2 A deeper dive into the server function", " 3.2 A deeper dive into the server function server &lt;- function(input, output, session) input list-like object used for receiving input (sent from the browser) read-only (no x &lt;- ‘12’ in server; otherwise you’ll get an error) must be read in a reactive context (e.g. renderText() or reactive()) Otherwise, you’ll get an error. output list-like object used for sending output ALWAYS use with a render fn() - sets up the reactive context &amp; renders the HTML. ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText({ paste0(&quot;Hello &quot;, input$name, &quot;!&quot;) }) } "],["reactive-programming.html", "3.3 Reactive Programming", " 3.3 Reactive Programming Reactive programming is an elegant and powerful programming paradigm, but it can be disorienting at first because it’s a very different paradigm to writing a script. ~Hadley Wickham (Author) Mental Model - tell vs inform (providing Shiny with recipes, not giving it commands). - recipes, not commands. 3.3.1 Imperative vs declarative programming Key differences between two important styles of programming: Imperative programming - issue a specific command and it’s carried out immediately. Declarative programming - express higher-level goals or describe important constraints, and rely on someone else to decide how and/or when to translate that into action. Imperative code is assertive; declarative code is passive-aggressive “Make me a sandwich” vs “Ensure there is a sandwich in the refrigerator whenever I look inside of it” In essence, you describe your overall goals, and the software figures out how to achieve them without further intervention. "],["laziness.html", "3.4 Laziness", " 3.4 Laziness It allows apps to be extremely lazy: Shiny’s aim is to only do the work that is needed. It will only update outputs that you can currently see. 3.4.1 Will this app work? library(shiny) ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What is your name?&quot;), textOutput(&quot;greeting&quot;), textOutput(&quot;nice_day&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText(str_c(&quot;Hello &quot;, input$name, &quot;!&quot;)) output$nic_day &lt;- renderText(str_c(&quot;Have a nice day, &quot;, input$name, &quot;!&quot;)) } shinyApp(ui, server) CAUTION: If you’re working on a Shiny app and you just can’t figure out why your code never gets run, double check that your UI and server functions are using the same identifiers. "],["the-reactive-graph.html", "3.5 The reactive graph", " 3.5 The reactive graph understanding order of execution code is only run when needed Reactive graph describes how inputs and outputs are connected is a diagram identifying the reactive dependencies describe this relationship (output has a reactive dependency on input) A reactive graph is a powerful tool for understanding how your app works. - Make by hand - Use DiagrammeR pkg to make it manually yourself - Use reactlog package to do it automatically (more in later chapters) "],["reactive-expressions-1.html", "3.6 Reactive expressions", " 3.6 Reactive expressions What - A tool that reduces duplication in your reactive code by introducing additional nodes into the reactive graph How - using reactive() # Just for example server &lt;- function(input, output, session) { string &lt;- reactive(paste0(&quot;Hello &quot;, input$name, &quot;!&quot;)) output$greeting &lt;- renderText(string()) } In other words, reactive makes apps cleaner &amp; more efficient (by removing redundant codes &amp; recomputation). It also simplifies the reactive graph. Reactive expressions have a flavour of both inputs and outputs: Like inputs, you can use the results of a reactive expression in an output. Like outputs, reactive expressions depend on inputs and automatically know when they need updating. "],["new-vocab---producers-and-consumers.html", "3.7 New vocab - producers and consumers", " 3.7 New vocab - producers and consumers producers to refer to reactive inputs and expressions, and consumers to refer to reactive expressions and outputs Diagram taken from the book: Review the example app testing the difference between two simulated samples. "],["execution-order.html", "3.8 Execution order", " 3.8 Execution order determined solely by the reactive graph (and not the order of lines of code/layout in the server function unlike normal R scripts) # This code will work, but it&#39;s not easy to read server &lt;- function(input, output, session) { output$greeting &lt;- renderText(string()) string &lt;- reactive(paste0(&quot;Hello &quot;, input$name, &quot;!&quot;)) } "],["controlling-timing-of-evaluation.html", "3.9 Controlling timing of evaluation", " 3.9 Controlling timing of evaluation 3.9.1 Timed invalidation How - using reactiveTimer() server &lt;- function(input, output, session) { timer &lt;- reactiveTimer(500) x1 &lt;- reactive({ timer() rpois(input$n, input$lambda1) }) x2 &lt;- reactive({ timer() rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } Diagram taken from the book 3.9.2 On click How - using actionButton(), eventReactive() ## UI excluded to save space, but it contains the `actionButton()` input server &lt;- function(input, output, session) { x1 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda1) }) x2 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } Diagram from book: "],["observers.html", "3.10 Observers", " 3.10 Observers 3.10.1 When might you use an observer? Anytime you need to make a call out of the application. Saving a file to a shared drive Sending data to an API Updating a database Printing a debugging message Observers don’t affect how the app looks. There are two important differences between observeEvent() and eventReactive(): You don’t/can’t assign the result of observeEvent() to a variable, so You can’t refer to it from other reactive consumers. "],["acknowledgements.html", "3.11 Acknowledgements", " 3.11 Acknowledgements mermaid(&quot; graph LR A(Rounded)--&gt;B[Rectangular] B--&gt;C{A Rhombus} C--&gt;D[Rectangle One] C--&gt;E[Rectangle Two] &quot;) mermaid(&quot; graph LR A[A arr_text] --- B&gt;A arrowtext] &quot;) "],["meeting-videos-2.html", "3.12 Meeting Videos", " 3.12 Meeting Videos 3.12.1 Cohort 1 Meeting chat log 00:08:22 Russ Hyde: Hi Everyone 00:14:31 Russ Hyde: The chapter numbers have actually changed; so this week is chapter 3 (according to the current website). The preface is now unnumbered 00:23:13 Russ Hyde: Discussion of persistence of user sessions. 00:23:18 Robert Overman: https://shiny.rstudio.com/articles/reconnecting.html this says something about it 00:25:21 shamsuddeen: In the past, users of Shiny applications would get disconnected from the server and see the browser window “gray out” if the network connection was interrupted, even if it was just briefly. This could frustrate and confuse users, and it could lead to the impression that the application was unstable, when in fact the problem was the network connection. To improve the user experience, we’ve made changes in Shiny Server (Pro and Open Source) 1.4.7, RStudio Connect 1.5.10, and in Shiny 0.14 to allow a Shiny client to seamlessly reconnect to the server even when there is disruption of network service. 00:31:30 shamsuddeen: Imperative code is assertive; declarative code is passive-aggressive. 00:42:13 Russ Hyde: https://cran.r-project.org/web/packages/DiagrammeR/index.html 00:44:15 Russ Hyde: https://cran.r-project.org/web/packages/reactlog/index.html 01:03:19 Russ Hyde: Great. Thanks for covering such a lot of content 01:07:56 shamsuddeen: Ok, thank you all. I had to attend another meeting now. See you next. 3.12.2 Cohort 2 3.12.3 Cohort 3 "],["case-study-er-injuries.html", "Chapter 4 Case study: ER injuries", " Chapter 4 Case study: ER injuries Learning objectives: Learn how to create a more complex Shiny app Get an idea how to build your app based on your data exploration Learn how to create your app step-by-step Get more comfortable using the techniques you learned so far "],["introduction-1.html", "4.1 Introduction", " 4.1 Introduction This Chapter is about building a more complex app with the tools we learned in the previous chapters. We’re going to use the following packages: library(shiny) library(vroom) library(tidyverse) "],["the-data.html", "4.2 The data", " 4.2 The data We’re exploring data from the National Electronic Injury Surveillance System (NEISS), which covers accidents reported from a sample of hospitals in the US. For every accident / inured person we have date, age, sex, race, body part, diagnosis and location (Home, School, Street Or Highway etc.) as well as primary product associated with the injury and a brief story how the accident occured. Further we have a weight attribute for an estimation how may people the current case represents if the dataset was scaled to the entire US population. Code to download the data: dir.create(&quot;neiss&quot;) download &lt;- function(name) { url &lt;- &quot;https://github.com/hadley/mastering-shiny/raw/master/neiss/&quot; download.file(paste0(url, name), paste0(&quot;neiss/&quot;, name), quiet = TRUE) } download(&quot;injuries.tsv.gz&quot;) download(&quot;population.tsv&quot;) download(&quot;products.tsv&quot;) Main data: injuries &lt;- vroom(&quot;neiss/injuries.tsv.gz&quot;) injuries ## # A tibble: 255,064 × 10 ## trmt_date age sex race body_part diag location prod_code weight ## &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2017-01-01 71 male white Upper Tru… Cont… Other P… 1807 77.7 ## 2 2017-01-01 16 male white Lower Arm Burn… Home 676 77.7 ## 3 2017-01-01 58 male white Upper Tru… Cont… Home 649 77.7 ## 4 2017-01-01 21 male white Lower Tru… Stra… Home 4076 77.7 ## 5 2017-01-01 54 male white Head Inte… Other P… 1807 77.7 ## 6 2017-01-01 21 male white Hand Frac… Home 1884 77.7 ## 7 2017-01-01 35 female not stated Lower Tru… Stra… Home 1807 87.1 ## 8 2017-01-01 62 female not stated Lower Arm Lace… Home 4074 87.1 ## 9 2017-01-01 22 male not stated Knee Disl… Home 4076 87.1 ## 10 2017-01-01 58 female not stated Lower Leg Frac… Home 1842 87.1 ## # … with 255,054 more rows, and 1 more variable: narrative &lt;chr&gt; Product names: products &lt;- vroom(&quot;neiss/products.tsv&quot;) products ## # A tibble: 38 × 2 ## prod_code title ## &lt;dbl&gt; &lt;chr&gt; ## 1 464 knives, not elsewhere classified ## 2 474 tableware and accessories ## 3 604 desks, chests, bureaus or buffets ## 4 611 bathtubs or showers ## 5 649 toilets ## 6 676 rugs or carpets, not specified ## 7 679 sofas, couches, davenports, divans or st ## 8 1141 containers, not specified ## 9 1200 sports or recreational activity, n.e.c. ## 10 1205 basketball (activity, apparel or equip.) ## # … with 28 more rows Population data: population &lt;- vroom(&quot;neiss/population.tsv&quot;) population ## # A tibble: 170 × 3 ## age sex population ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 0 female 1924145 ## 2 0 male 2015150 ## 3 1 female 1943534 ## 4 1 male 2031718 ## 5 2 female 1965150 ## 6 2 male 2056625 ## 7 3 female 1956281 ## 8 3 male 2050474 ## 9 4 female 1953782 ## 10 4 male 2042001 ## # … with 160 more rows "],["exploration.html", "4.3 Exploration", " 4.3 Exploration As motivation for the app we want to build, we’re going to explore the data. Let’s have a look at accidents related to toilets: # product code for toilets is 649 selected &lt;- injuries %&gt;% filter(prod_code == 649) nrow(selected) ## [1] 2993 We’re interested in how many accidents related to toilets we see for different locations, body parts and diagnosis. selected %&gt;% count(location, wt = weight, sort = TRUE) ## # A tibble: 6 × 2 ## location n ## &lt;chr&gt; &lt;dbl&gt; ## 1 Home 99603. ## 2 Other Public Property 18663. ## 3 Unknown 16267. ## 4 School 659. ## 5 Street Or Highway 16.2 ## 6 Sports Or Recreation Place 14.8 selected %&gt;% count(body_part, wt = weight, sort = TRUE) ## # A tibble: 24 × 2 ## body_part n ## &lt;chr&gt; &lt;dbl&gt; ## 1 Head 31370. ## 2 Lower Trunk 26855. ## 3 Face 13016. ## 4 Upper Trunk 12508. ## 5 Knee 6968. ## 6 N.S./Unk 6741. ## 7 Lower Leg 5087. ## 8 Shoulder 3590. ## 9 All Of Body 3438. ## 10 Ankle 3315. ## # … with 14 more rows selected %&gt;% count(diag, wt = weight, sort = TRUE) ## # A tibble: 20 × 2 ## diag n ## &lt;chr&gt; &lt;dbl&gt; ## 1 Other Or Not Stated 32897. ## 2 Contusion Or Abrasion 22493. ## 3 Inter Organ Injury 21525. ## 4 Fracture 21497. ## 5 Laceration 18734. ## 6 Strain, Sprain 7609. ## 7 Dislocation 2713. ## 8 Hematoma 2386. ## 9 Avulsion 1778. ## 10 Nerve Damage 1091. ## 11 Poisoning 928. ## 12 Concussion 822. ## 13 Dental Injury 199. ## 14 Hemorrhage 167. ## 15 Crushing 114. ## 16 Dermat Or Conj 84.2 ## 17 Burns, Not Spec 67.2 ## 18 Puncture 67.2 ## 19 Burns, Thermal 34.0 ## 20 Burns, Scald 17.0 Next we’ll we create a plot for the number of accidents for different age and sex: summary &lt;- selected %&gt;% count(age, sex, wt = weight) %&gt;% left_join(y = population, by = c(&quot;age&quot;, &quot;sex&quot;)) %&gt;% mutate(rate = n / population * 1e4) summary %&gt;% ggplot(mapping = aes(x = age, y = rate, color = sex)) + geom_line(na.rm = TRUE) + labs(y = &quot;Injuries per 10,000 people&quot;) The goal is to build an app, which outputs the tables and the plot for different products, which the user selects. "],["prototype.html", "4.4 Prototype", " 4.4 Prototype The first version of the app is a dashboard, where the user can choose a product and get the tables and the plot we have seen in the previous chapter. Code of the ui: ui &lt;- fluidPage( # choose product fluidRow( column( width = 6, selectInput(inputId = &quot;code&quot;, label = &quot;Product&quot;, choices = prod_codes) ) ), # display tables fluidRow( column(width = 4, tableOutput(outputId = &quot;diag&quot;)), column(width = 4, tableOutput(outputId = &quot;body_part&quot;)), column(width = 4, tableOutput(outputId = &quot;location&quot;)) ), # display plot fluidRow( column(width = 12, plotOutput(outputId = &quot;age_sex&quot;)) ) ) Code of the server: server &lt;- function(input, output, session) { # reactive for filtered data frame selected &lt;- reactive( injuries %&gt;% filter(prod_code == input$code) ) # render diagnosis table output$diag &lt;- renderTable( selected() %&gt;% count(diag, wt = weight, sort = TRUE) ) # render body part table output$body_part &lt;- renderTable( selected() %&gt;% count(body_part, wt = weight, sort = TRUE) ) # render location table output$location &lt;- renderTable( selected() %&gt;% count(location, wt = weight, sort = TRUE) ) # reactive for plot data summary &lt;- reactive( selected() %&gt;% count(age, sex, wt = weight) %&gt;% left_join(y = population, by = c(&quot;age&quot;, &quot;sex&quot;)) %&gt;% mutate(rate = n / population * 1e4) ) # render plot output$age_sex &lt;- renderPlot( expr = { summary() %&gt;% ggplot(mapping = aes(x = age, y = n, colour = sex)) + geom_line() + labs(y = &quot;Estimated number of injuries&quot;) }, res = 96 ) } Note: The reactive for plot data is only used once. You could also compute the dataframe when rendering the plot, but it is good practise to seperate computing and plotting. It’s easier to understand and generalise. This prototype is available at https://hadley.shinyapps.io/ms-prototype/. Now we’re going to improve the app step-by-step. "],["polish-tables.html", "4.5 Polish tables", " 4.5 Polish tables The prototype version of the app has very long tables. To make it a little clearer we only want to show the top 5 and lump together all other categories in every table. As an example the diagnosis table for all products would look like this: injuries %&gt;% mutate(diag = fct_lump(fct_infreq(diag), n = 5)) %&gt;% group_by(diag) %&gt;% summarise(n = as.integer(sum(weight))) ## # A tibble: 6 × 2 ## diag n ## &lt;fct&gt; &lt;int&gt; ## 1 Other Or Not Stated 1806436 ## 2 Fracture 1558961 ## 3 Laceration 1432407 ## 4 Strain, Sprain 1432556 ## 5 Contusion Or Abrasion 1451987 ## 6 Other 1929147 "],["rate-vs-count.html", "4.6 Rate vs count", " 4.6 Rate vs count Next step is to give the user the chance to plot the data relative to 10,000 People or in absolute numbers. The new ui looks like this: ui &lt;- fluidPage( fluidRow( column( width = 8, selectInput( inputId = &quot;code&quot;, label = &quot;Product&quot;, choices = prod_codes, width = &quot;100%&quot; ) ), column( width = 2, selectInput(inputId = &quot;y&quot;, label = &quot;Y axis&quot;, choices = c(&quot;rate&quot;, &quot;count&quot;)) ) ), fluidRow( column(width = 4, tableOutput(outputId = &quot;diag&quot;)), column(width = 4, tableOutput(outputId = &quot;body_part&quot;)), column(width = 4, tableOutput(outputId = &quot;location&quot;)) ), fluidRow( column(width = 12, plotOutput(outputId = &quot;age_sex&quot;)) ) ) And plot rendering changes to: server &lt;- function(input, output, session) { ... output$age_sex &lt;- renderPlot( expr = { if (input$y == &quot;count&quot;) { summary() %&gt;% ggplot(mapping = aes(x = age, y = n, colour = sex)) + geom_line() + labs(y = &quot;Estimated number of injuries&quot;) } else { summary() %&gt;% ggplot(mapping = aes(x = age, y = rate, colour = sex)) + geom_line(na.rm = TRUE) + labs(y = &quot;Injuries per 10,000 people&quot;) } }, res = 96 ) } "],["narrative.html", "4.7 Narrative", " 4.7 Narrative Now we want a button to sample an accident story related to the currently chosen product and display it. We add the following ui elements: ui &lt;- fluidPage( ... fluidRow( column( width = 2, actionButton(inputId = &quot;story&quot;, label = &quot;Tell me a story&quot;) ), column(width = 10, textOutput(outputId = &quot;narrative&quot;)) ) ) In the backend we need an eventReactive that triggers, when the button is clicked or the selected data changes: server &lt;- function(input, output, session) { ... narrative_sample &lt;- eventReactive( eventExpr = list(input$story, selected()), valueExpr = selected() %&gt;% pull(narrative) %&gt;% sample(1) ) output$narrative &lt;- renderText(narrative_sample()) } The resulting version of the app is available at https://hadley.shinyapps.io/ms-prototype/. "],["meeting-videos-3.html", "4.8 Meeting Videos", " 4.8 Meeting Videos 4.8.1 Cohort 1 Meeting chat log 00:13:23 Russ Hyde: Hi all. Welcome to this week&#39;s Mastering Shiny talk 00:20:33 Matt C: What is the correlation between head injuries and toilets? Hm... 00:36:58 Morgan Grovenburg: Very cool Dave! 00:37:07 priyanka gagneja: awesome 00:37:15 Federica Gazzelloni: great 00:38:44 Robert Overman: https://www.jdtrat.com/packages/shinysurveys/ 00:39:17 priyanka gagneja: lol what a coincidence.. I have recently played with this pkg 00:39:55 priyanka gagneja: it&#39;s neat one .. so low cost to create a survey and then you can save the results in a Google sheet .. using googlsheets4 pkg 00:43:44 priyanka gagneja: rhandsontable 00:43:49 Federica Gazzelloni: thanks 00:46:12 priyanka gagneja: if you only looking to change the look of the table only russ, gt and kable could be useful 00:46:25 priyanka gagneja: and even reactable, DT would be others 00:46:36 shamsuddeen: KableExtra is also cool 00:47:31 shamsuddeen: https://github.com/haozhu233/kableExtra 00:49:58 priyanka gagneja: https://rstudio.github.io/reactlog/articles/reactlog.html 00:57:03 Russ Hyde: mutate(df, {{var}} := f({{var}})) 00:57:38 priyanka gagneja: uhh noo 00:58:21 Robert Overman: I mean I have enough trouble remembering !!rlang::sym(x) remembering that this now works as {{x}} is going to make my head hurt 00:58:36 Arnab Dey (he/him): Thank you Dave, for an excellent presentation!! 4.8.2 Cohort 2 Meeting chat log 00:11:36 Ryan Metcalf: https://www.infoworld.com/article/3516150/create-a-shiny-app-to-search-twitter-with-rtweet-and-r.amp.html 4.8.3 Cohort 3 Meeting chat log LOG "],["workflow.html", "Chapter 5 Workflow ", " Chapter 5 Workflow "],["why-workflow.html", "5.1 Why workflow?", " 5.1 Why workflow? “I think of workflow as one of my”secret\" powers: one of the reasons that I’ve been able to accomplish so much is that I devote time to analysing and improving my workflow. I highly encourage you to do the same!\" -Hadley Wickham (author) Workflow makes the process of writing Shiny apps more enjoyable, and helps your skills improve more quickly. "],["learning-objectives-1.html", "5.2 Learning objectives", " 5.2 Learning objectives The goal of this chapter is to help you improve three important Shiny workflows: Learn basic development cycle for creating apps,making changes, and quickly expirement with the results. Learn how to debug Shiny apps Learn how to write self-contained reprexes "],["development-workflow.html", "5.3 Development workflow", " 5.3 Development workflow Why development workflow? Allows you to reduce the time between making a change and seeing the outcome The faster you can iterate and experiment, the faster you will become a better Shiny developer. Two main workflows to optimize here: creating apps (for first time), making changes and experimenting with the results faster (speeding up the iterative cycle). "],["creating-apps.html", "5.4 Creating apps", " 5.4 Creating apps Every shiny app has the same six lines of code. library(shiny) ui &lt;- fluidPage( ) server &lt;- function(input, output, session) { } shinyApp(ui, server) Type shinyapp in app.R and you will see prompt to insert snippet (Shift + Tab). If you are using RStudio, you can create Shiny Web Application project easily via the file menu. File &gt;&gt; New Project &gt;&gt; New Directory &gt;&gt; Shiny Web Application "],["seeing-your-changes-faster.html", "5.5 Seeing your changes faster", " 5.5 Seeing your changes faster At most, you’ll create a few apps a day, but you’ll run apps hundreds of times, so mastering the development workflow is particularly important. - Hadley Wickham (author) Avoid clicking the “Run App” button Use keyboard shortcut: Cmd/Ctrl + Shift + Enter Turn auto reload on and run the app in the background as described here. Gives faster workflow: write some code, Cmd/Ctrl + S to save the file and experiment interactively. Disadvantage: harder to debug because the app is running in a separate process. Bigger apps: interactive testing &gt;&gt; automated testing (Chapter 21). Demo starting an app as a local job. "],["controlling-the-view.html", "5.6 Controlling the view", " 5.6 Controlling the view Run in Viewer Pane: opens the app in the viewer pane . for smaller apps Run External: opens the app in your usual web browser. useful for larger apps Submenu used to change the view (click the drop-down) "],["debugging.html", "5.7 Debugging", " 5.7 Debugging It’s an eight line app, what could possibly go wrong? -Hadley Wickham (author) The process of systematically comparing your expectations to reality until you find the mismatch. -Hadley Wickham (author) something will go wrong definitely. it takes years of experience to write code that works the first time (So, we need a robust workflow for identifying and fixing mistakes) Specific focus to three debugging challenges to Shiny apps "],["three-dubugging-challenges.html", "5.8 Three dubugging Challenges", " 5.8 Three dubugging Challenges 5.8.1 You get an unexpected error (easiest case). Solution: A traceback is returned Info that points to where the error occurred The interactive debugger is a powerful assistant for this process. 5.8.2 You don’t get any errors Solution: Use the interactive debugger A tool to investigative and track down the root cause. 5.8.3 All the values are correct, but they’re not updated when you expect Solution: Most challenging problem It’s unique to Shiny You can’t take advantage of your existing R debugging skills. "],["fixing-errors-tracebacks.html", "5.9 Fixing errors: Tracebacks", " 5.9 Fixing errors: Tracebacks In R, every error is accompanied by a traceback, or call stack, which literally traces back through the sequence of calls that lead to the error The functions are printed in reverse order The traceback tool pinpoints the location of an error. 5.9.1 Example of reading traceback f &lt;- function(x) g(x) g &lt;- function(x) h(x) h &lt;- function(x) 2 * 2 f(3) ## [1] 4 f &lt;- function(x) g(x) g &lt;- function(x) h(x) h &lt;- function(x) x * 2 f(&quot;a&quot;) This will generate an error below f(&quot;a&quot;) #&gt; Error in x * 2: non-numeric argument to binary operator The traceback is shown below: Top of the stack points to an error traceback() #&gt; 3: h(x) #&gt; 2: g(x) #&gt; 1: f(&quot;a&quot;) Flipping the traceback shows the better sequence(the top of the stack points to an error location) shows sequence of calls that lead to the error — f() called g() called h() (which errors) 1: f(&quot;a&quot;) 2: g(x) 3: h(x) "],["tracebacks-in-shiny.html", "5.10 Tracebacks in Shiny", " 5.10 Tracebacks in Shiny You can’t use traceback() in Shiny because you can’t run code while an app is running. Shiny automatically prints the traceback for you. library(shiny) f &lt;- function(x) g(x) g &lt;- function(x) h(x) h &lt;- function(x) x * 2 ui &lt;- fluidPage( selectInput(&quot;n&quot;, &quot;N&quot;, 1:10), plotOutput(&quot;plot&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot({ n &lt;- f(input$n) plot(head(cars, n)) }, res = 96) } shinyApp(ui, server) We will see an error below Error in *: non-numeric argument to binary operator 169: g [app.R#4] 168: f [app.R#3] 167: renderPlot [app.R#13] 165: func 125: drawPlot 111: &lt;reactive:plotObj&gt; 95: drawReactive 82: renderFunc 81: output$plot 1: runApp We can also flip the error Error in *: non-numeric argument to binary operator 1: runApp 81: output$plot 82: renderFunc 95: drawReactive 111: &lt;reactive:plotObj&gt; 125: drawPlot 165: func 167: renderPlot [app.R#13] 168: f [app.R#3] 169: g [app.R#4] "],["three-components-to-a-shiny-error-stack.html", "5.11 Three components to a Shiny error stack", " 5.11 Three components to a Shiny error stack First: few calls start the app. Ignore anything before the first runApp(); this is just the setup code to get the app running. 1: runApp #Sometimes, you may see other things before runAPP ignore them #1: source #3: print.shiny.appobj #5: runApp Second: some internal Shiny code in charge of calling the reactive expression(output$plot is where the problem is) : 81: output$plot 82: renderFunc 95: drawReactive 111: &lt;reactive:plotObj&gt; 125: drawPlot 165: func Third: Code that you have written 167: renderPlot [app.R#13] 168: f [app.R#3] 169: g [app.R#4] "],["fixing-errors-interactive-debugger.html", "5.12 Fixing errors: Interactive debugger", " 5.12 Fixing errors: Interactive debugger When do we use? You have identified the error using traceback and want to figure out what’s causing it. Use the interactive debugger to debug your code Two ways to launch the debugger: Add a call to browser() in your source code This can also be done using a conditional statement if (input$value == &quot;a&quot;) { browser() } # Or maybe if (my_reactive() &lt; 0) { browser() } Add an RStudio breakpoint by clicking to the left of the line number 5.12.1 Useful interactive debugger commands Use these when you the debugger is up and running: n - next step in the function c - leaves debugger, continues the regular execution of the function Q - stops debugging, terminates the function, and returns to global workspace "],["debugging-reactivity.html", "5.13 Debugging reactivity", " 5.13 Debugging reactivity Hardest problem to debug. We need other tools, which are not introduced in this chapter. Use “print” debugging to show your values. Use message() here: “standard output” vs “standard error” "],["getting-help-using-reprex.html", "5.14 Getting help (using Reprex)", " 5.14 Getting help (using Reprex) If you cant debug the error, it is time to ask for help at Shiny Community by creating Reprex A reprex is just some R code that works when you copy and paste it into a R session on another computer Good reprex, makes it easy for others to help you debug your app Below is an example of Shiny reprex 5.14.1 How to make a reprex Create a single self-contained file that contains everything needed to run your code (e.g load all packages) Test it by restarting fresh R session and then running the code Potential problem is sharing your data Use built-in datasets(mpg), create sample datasets and illustrate the problem, use subset of the data with dput() (mydata &lt;- data.frame(x = 1:5, y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;))) ## x y ## 1 1 a ## 2 2 b ## 3 3 c ## 4 4 d ## 5 5 e dput(mydata) ## structure(list(x = 1:5, y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, ## -5L)) Last resort is to provide complete app.R and the needed data files using Gihub or Zip files (if reading data from disk seems irreducible part of the problem) Make sure you use relative paths Format your code for to be easy read Use styler package if you adopt tidyverse style guide 5.14.2 Making a minimal reprex Trim out all the code that’s ok (make the life of a helper much easier) rather than forcing a potential helper to understand your entire app. This process often lead you to discover what the problem is, so you don’t have to wait for help from someone else! A good way to find error code is to remove sections of code from your application, piece by piece, until the problem goes away If removing a particular piece of code makes the problem stop, it’s likely that that code is related to the problem. 5.14.2.1 Example of Bad reprex all the needed packages are not loaded The code is not style, making it uneasy to help library(shiny) shinyApp( ui = fluidPage( uiOutput(&quot;interaction_slider&quot;), verbatimTextOutput(&quot;breaks&quot;) ), server = function(input, output, session) { df &lt;- data.frame (dateTime = c(&quot;2019-08-20 16:00:00&quot;, &quot;2019-08-20 16:00:01&quot;, &quot;2019-08-20 16:00:02&quot;, &quot;2019-08-20 16:00:03&quot;, &quot;2019-08-20 16:00:04&quot;, &quot;2019-08-20 16:00:05&quot;), var1 = c(9, 8, 11, 14, 16, 1), var2 = c(3, 4, 15, 12, 11, 19), var3 = c(2, 11, 9, 7, 14, 1) ) timeSeries &lt;- as.xts(df[,2:4],order.by=strptime(df[,1], format=&quot;%Y-%m-%d %H:%M:%S&quot;)) print (paste(min(time(timeSeries)),is.POSIXt(min(time(timeSeries))),sep=&#39; &#39;)) print (paste(max(time(timeSeries)),is.POSIXt(max(time(timeSeries))),sep=&#39; &#39;)) output$interaction_slider &lt;- renderUI({ sliderInput( &quot;slider&quot;, 5.14.2.2 Making the bad reprex better(minimal) loaded needd packages The code is style, making it easy to help library(xts) library(lubridate) library(shiny) ui &lt;- fluidPage( uiOutput(&quot;interaction_slider&quot;), verbatimTextOutput(&quot;breaks&quot;) ) server &lt;- function(input, output, session) { df &lt;- data.frame( dateTime = c( &quot;2019-08-20 16:00:00&quot;, &quot;2019-08-20 16:00:01&quot;, &quot;2019-08-20 16:00:02&quot;, &quot;2019-08-20 16:00:03&quot;, &quot;2019-08-20 16:00:04&quot;, &quot;2019-08-20 16:00:05&quot; ), var1 = c(9, 8, 11, 14, 16, 1), var2 = c(3, 4, 15, 12, 11, 19), var3 = c(2, 11, 9, 7, 14, 1) ) timeSeries &lt;- as.xts(df[, 2:4], order.by = strptime(df[, 1], format = &quot;%Y-%m-%d %H:%M:%S&quot;) ) print(paste(min(time(timeSeries)), is.POSIXt(min(time(timeSeries))), sep = &quot; &quot;)) print(paste(max(time(timeSeries)), is.POSIXt(max(time(timeSeries))), sep = &quot; &quot;)) output$interaction_slider &lt;- renderUI({ sliderInput( &quot;slider&quot;, &quot;Select Range:&quot;, min = min(time(timeSeries)), max = max(time(timeSeries)), value = c(min, max) ) }) brks &lt;- reactive({ req(input$slider) seq(input$slider[1], input$slider[2], length.out = 10) }) output$breaks &lt;- brks } shinyApp(ui, server) Remove part of the code that is independent with the error(e.g two lines starting with print(), timeSeres and df) new server calls reduced: datetime &lt;- Sys.time() + (86400 * 0:10) server &lt;- function(input, output, session) { output$interaction_slider &lt;- renderUI({ sliderInput( &quot;slider&quot;, &quot;Select Range:&quot;, min = min(datetime), max = max(datetime), value = c(min, max) ) }) brks &lt;- reactive({ req(input$slider) seq(input$slider[1], input$slider[2], length.out = 10) }) output$breaks &lt;- brks } Next, the example uses a relatively sophisticated Shiny technique where the UI is generated in the server function. But the renderUI() doesn’t use any reactive inputs, so it should work the UI. this leads to new UI that generate the error: ui &lt;- fluidPage( sliderInput(&quot;slider&quot;, &quot;Select Range:&quot;, min = min(datetime), max = max(datetime), value = c(min, max) ), verbatimTextOutput(&quot;breaks&quot;) ) #&gt; Error: Type mismatch for `min`, `max`, and `value`. #&gt; i All values must have same type: either numeric, Date, or POSIXt. looking at each of the inputs we’re feeding to min, max, and value to see where the problem is: min(datetime) #&gt; [1] &quot;2021-03-15 23:20:03 UTC&quot; max(datetime) #&gt; [1] &quot;2021-03-25 23:20:03 UTC&quot; c(min, max) #&gt; [[1]] #&gt; function (..., na.rm = FALSE) .Primitive(&quot;min&quot;) #&gt; #&gt; [[2]] #&gt; function (..., na.rm = FALSE) .Primitive(&quot;max&quot;) Now the problem is obvious: we haven’t assigned min and max variables ui &lt;- fluidPage( sliderInput(&quot;slider&quot;, &quot;Select Range:&quot;, min = min(datetime), max = max(datetime), value = range(datetime) ), verbatimTextOutput(&quot;breaks&quot;) ) "],["meeting-videos-4.html", "5.15 Meeting Videos", " 5.15 Meeting Videos 5.15.1 Cohort 1 Meeting chat log 00:04:01 Russ Hyde: Hi Everyone. Welcome to this weeks bookclub meeting. 00:05:43 Diamantis Sellis: Hi, thanks for organizing! 00:05:52 docksbox@pm.me: Hello! 00:07:45 Russ Hyde: So. Shamsudeen should be presenting today. 00:12:21 Russ Hyde: Hi everyone. Are you able to hear Shamsuddeen ok? 00:12:27 priyanka gagneja: yes 00:12:31 Anne Hoffrichter: yes 00:12:32 Diamantis Sellis: yes 00:15:27 Jessica Mukiri: Hey have you just stared or the daylight savings taken effect yet? 00:17:28 Kent J: DST started on Sunday morning in Boston. 00:42:35 Russ Hyde: Is it options(shiny.fullstacktrace = TRUE)? 00:42:41 Russ Hyde: https://shiny.rstudio.com/reference/shiny/1.1.0/shiny-options.html 00:43:48 Russ Hyde: There&#39;s an example herer: https://shiny.rstudio.com/articles/debugging.html 01:08:13 Jessica Mukiri: Thanks everyone, have a good week. 5.15.2 Cohort 2 Meeting chat logs # 2021-08-25 01:06:57 Kevin: pointblank pkg #2021-09-01 00:12:41 Conor Tompkins: Is Kevin’s volume low for anyone else? 00:12:43 shane: Kevin are you able to bring your mic volume up a little? 00:12:45 shane: yeah 01:05:45 Kevin Gilds: https://twitter.com/EmilyRiederer/status/1430882791806410753?s=20 5.15.3 Cohort 3 Meeting chat log LOG "],["layout-themes-html.html", "Chapter 6 Layout, themes, HTML", " Chapter 6 Layout, themes, HTML library(bslib) ## ## Attaching package: &#39;bslib&#39; ## The following object is masked from &#39;package:utils&#39;: ## ## page library(htmltools) library(shiny) "],["disclaimer.html", "6.1 Disclaimer", " 6.1 Disclaimer “Mastering Shiny” is a moving target. Much of the content for “Layout, themes, HTML” chapter was originally part of the “Basic UI” chapter. Hence, these notes have greater emphasis on low-level web concerns (html / css / bootstrap) "],["learning-objectives-2.html", "6.2 Learning objectives", " 6.2 Learning objectives Creating raw html using R HTML elements: attributes, classes, content CSS for styling Bootstrap (and related) front end toolkits Shiny produces single-page applications … but multipage layouts are possible "],["resources.html", "6.3 Resources", " 6.3 Resources 6.3.1 Websites Awesome Shiny Extensions Shiny Application Layout Guide Mozilla Developer Network Intro to HTML CSS First Steps Website parsing figure 6.3.2 Books Outstanding User Interfaces … Especially Chapters 1, 5, 6, 7 6.3.3 Packages / Tools Bootstrap Sass R packages {htmltools} (for building raw html) {sass} (for building css using Sass rules; not mentioned in Wickham) {bslib} (handles working with bootstrap) {thematic} (matches plotting theme to app theme) {shiny.semantic} (formantic) {shinyMobile} (framework 7) {shinymaterial} (Material design) {shinydashboard} (for building dashboards) "],["under-the-hood-1.html", "6.4 Under the hood", " 6.4 Under the hood A typical web app: In the browser (front-end): .html file defines the content .css files define the style javascript handles interactivity On the server (back-end): Requests received from the client R performs computations based on those requests Sends responses to the client 6.4.1 HTML - Hypertext markup language To view the .html for an app Open an app in the browser or Rstudio “View source” / “Inspect” / Open “Developer Tools” Typical .html structure: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;!-- Metadata goes here (encodings, dependencies, author ...) --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;The page title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Content goes here!--&gt; &lt;h1&gt;My Printed Title&lt;/h1&gt; &lt;p&gt; A paragraph of text. &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 6.4.2 Writing HTML with shiny / htmltools How to write .html using just R code? The simplest shiny UI: ui &lt;- shiny::fluidPage() The .html body for that UI can be viewed directly: cat( as.character(ui) ) &lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt; To also include the ‘head’ for the .html: cat( shiny:::renderPage(ui) ) &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt; &lt;script type=&quot;application/shiny-singletons&quot;&gt;&lt;/script&gt; &lt;script type=&quot;application/html-dependencies&quot;&gt;jquery[3.6.0];shiny-css[1.7.1];shiny-javascript[1.7.1];bootstrap[3.4.1]&lt;/script&gt; &lt;script src=&quot;shared/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;shared/shiny.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;shared/shiny.min.js&quot;&gt;&lt;/script&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt; &lt;link href=&quot;shared/bootstrap/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;link href=&quot;shared/bootstrap/accessibility/css/bootstrap-accessibility.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;shared/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;shared/bootstrap/accessibility/js/bootstrap-accessibility.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; script and link elements in the &lt;head&gt; = dependencies for the site Adding bare HTML to the shiny-produced HTML ui_with_raw_html &lt;- shiny::fluidPage( # some raw html htmltools::HTML(r&quot;( &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;First bullet&lt;/li&gt; &lt;li&gt;Second bullet&lt;/li&gt; &lt;/ul&gt; )&quot; ), # a shiny text imput textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;) ) cat( as.character(ui_with_raw_html) ) &lt;div class=&quot;container-fluid&quot;&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;First bullet&lt;/li&gt; &lt;li&gt;Second bullet&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;form-group shiny-input-container&quot;&gt; &lt;label class=&quot;control-label&quot; id=&quot;name-label&quot; for=&quot;name&quot;&gt;What&#39;s your name?&lt;/label&gt; &lt;input id=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;&quot;/&gt; &lt;/div&gt; &lt;/div&gt; Using HTML helpers: ui_from_html_helpers &lt;- shiny::fluidPage( h1(&quot;This is a heading&quot;, class = &quot;my-class&quot;), tags$ul( tags$li(&quot;First bullet&quot;), tags$li(&quot;Second bullet&quot;) ), textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;) ) cat( as.character(ui_from_html_helpers) ) ## &lt;div class=&quot;container-fluid&quot;&gt; ## &lt;h1 class=&quot;my-class&quot;&gt;This is a heading&lt;/h1&gt; ## &lt;ul&gt; ## &lt;li&gt;First bullet&lt;/li&gt; ## &lt;li&gt;Second bullet&lt;/li&gt; ## &lt;/ul&gt; ## &lt;div class=&quot;form-group shiny-input-container&quot;&gt; ## &lt;label class=&quot;control-label&quot; id=&quot;name-label&quot; for=&quot;name&quot;&gt;What&#39;s your name?&lt;/label&gt; ## &lt;input id=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;&quot;/&gt; ## &lt;/div&gt; ## &lt;/div&gt; 6.4.3 CSS - Cascading Style Sheets CSS isn’t covered in the chapter (but links provided) but underlies how bootstrap styles your shiny app Much more detail at MDN; and in Outstanding User Interfaces with Shiny How does the browser display a site / app? MDN Website parsing figure 6.4.4 Using CSS to style a shiny app A simple CSS file to set any text with “my-class” as class to red /* ./examples/06-layout_themes_html-css_example/www/style.css */ .my-class { color: red } Put static files (javascript / css) in the ./www subdirectory of your app Include your files using tags$link when defining the UI Note: the path in the link should be “style.css” not “www/style.css” # ./examples/06-layout_themes_html-css_example/app.R library(shiny) ui &lt;- shiny::fluidPage( tags$link(rel = &quot;stylesheet&quot;, type = &quot;text/css&quot;, href = &quot;style.css&quot;), h1(&quot;This is a heading&quot;, class = &quot;my-class&quot;), textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;) ) server &lt;- function(input, output, session) {} shinyApp(ui, server) You can write custom rules to style based on html element (p, h1, …), attributes IDs and on interactive things (eg, when the mouse hovers) "],["bootstrap-themes.html", "6.5 Bootstrap &amp; Themes", " 6.5 Bootstrap &amp; Themes Shiny uses the bootstrap toolkit for styling. Here’s the strapline for bootstrap: Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins. What does that mean? Responsive The page alters layout / appearance for different screen widths Sass variables and mixins These are tools that reduce the amount of repetition when writing CSS Prebuilt components You don’t have to write your own button, navbar, etc … classes from scratch Javascript plugins eg, for using dropdowns So bootstrap solves lots of challenges for us Use package {bslib} to work with bootstrap in R To modify themes: bslib::bs_theme( # colours in RGB bg = &quot;#202123&quot;, # background fg = &quot;#B8BCC2&quot;, # foreground primary = NULL, secondary = NULL, success = NULL, info = NULL, warning = NULL, danger = NULL, # fonts base_font = list(bslib::font_google(&quot;Pacifico&quot;, local = TRUE), &quot;sans-serif&quot;), code_font = NULL, heading_font = NULL # further options ... ) Or use bootswatch to pick a prebuilt theme: bslib::bs_theme(bootswatch = &quot;sandstone&quot;) Then use a theme in your UI definition: theme_dark &lt;- bslib::bs_theme( bootswatch = &quot;darkly&quot;, base_font = list(bslib::font_google(&quot;Pacifico&quot;, local = TRUE), &quot;sans-serif&quot;) ) ui_with_bs &lt;- fluidPage( theme = theme_dark ) cat( shiny:::renderPage(ui_with_bs) ) &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt; &lt;script type=&quot;application/shiny-singletons&quot;&gt;&lt;/script&gt; &lt;script type=&quot;application/html-dependencies&quot;&gt;jquery[3.6.0];shiny-css[1.7.1];shiny-javascript[1.7.1];bootstrap[4.6.0];_Pacifico[0.4.1];bs3compat[0.3.1]&lt;/script&gt; &lt;script src=&quot;shared/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;shared/shiny.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;shared/shiny.min.js&quot;&gt;&lt;/script&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot; /&gt; &lt;link href=&quot;bootstrap-4.6.0/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;bootstrap-4.6.0/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;_Pacifico-0.4.1/font.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;bs3compat-0.3.1/transition.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;bs3compat-0.3.1/tabs.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;bs3compat-0.3.1/bs3compat.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; "],["layouts-1.html", "6.6 Layouts", " 6.6 Layouts The Layouts section was moved from the Basic UI chapter with little change. Rather than go over them again, we’ll rewrite a simple (single-page layout) app into something more complicated (and style it while we’re at it) See ./examples/06-layout_themes_html-single_to_multipage_app/ 6.6.1 Single-page Layouts Page functions: fluidPage, fixedPage, fillPage Layout functions: sidebarLayout, fluidRow, column 6.6.2 Multi-page Layouts Page functions: navbarPage (or nest the following in fluidPage) Layout functions: tabsetPanel, tabPanel, navlistPanel, navbarMenu "],["case-study.html", "6.7 Case study", " 6.7 Case study This is one of the first shiny apps I wrote, it pulls data for a specific user from Stack Overflow, works out which “tags” they have received the most votes for, then plots those top tags in a word cloud. 6.7.1 The initial app (app-01.R) How might this app be improved? Code stackr eagerly obtains data from stack overflow (maybe it should wait til user has input a complete user ID) UX Visual style is boring (maybe it should look more like stack overflow?) Could we input user name, rather than ID? Could we show the user-name / image, so the user knows they’ve copied in the correct user ID Can we add some extra plots / tables and make a multipage layout # Plot a wordcloud to summarise the tags that a stack-overflow user tends to # answer/ask about library(shiny) library(wordcloud) library(stackr) # Helper functions make_word_cloud &lt;- function(df) { with( df, wordcloud::wordcloud( words = tag_name, freq = answer_score, min.freq = 0, colors = RColorBrewer::brewer.pal(6, &quot;Purples&quot;)[-1], scale = c(10, 0.5) ) ) } # Define UI for application that plots information about a user&#39;s stack # overflow presence ui &lt;- fluidPage( # Application title titlePanel(&quot;Stack Overflow: User Statistics&quot;), # Sidebar for selecting which Stack Overflow user&#39;s data is presented sidebarLayout( sidebarPanel( textInput(&quot;user_id&quot;, &quot;Select a Stack Overflow user ID:&quot;, &quot;1845650&quot;) ), # Show a plot of a wordcloud of the user&#39;s answer-tags mainPanel( plotOutput(&quot;word_cloud&quot;) ) ) ) # Define server logic required to obtain data from stack-overflow and draw a # wordcloud server &lt;- function(input, output) { stack_data &lt;- reactive( stackr::stack_users(input[[&quot;user_id&quot;]], &quot;top-tags&quot;), ) output$word_cloud &lt;- renderPlot( make_word_cloud(stack_data()) ) } # Run the application shinyApp(ui = ui, server = server) 6.7.2 The final app (app.R) Relative to the original app, we have: introduced a new results table (containing the data obtained from stack-overflow) converted from a single-panel to a multi-panel layout (using tabsetPanel and two tabPanels) attempted to use the stack-overflow colour scheme as part of the apps theme, and also in the wordcloud colour scheme The stack overflow colour scheme was obtained by using the browser’s developer tools (here using “Inspect” in chromium and looking at the “styles” section) on an open SO page. # Plot a wordcloud to summarise the tags that a stack-overflow user tends to # answer/ask about library(shiny) library(wordcloud) library(stackr) # Helper functions make_word_cloud &lt;- function(df) { with( df, wordcloud::wordcloud( words = tag_name, freq = answer_score, min.freq = 0, colors = RColorBrewer::brewer.pal(6, &quot;Purples&quot;)[-1], scale = c(10, 0.5) ) ) } # Define UI for application that plots information about a user&#39;s stack # overflow presence ui &lt;- fluidPage( # Application title titlePanel(&quot;Stack Overflow: User Statistics&quot;), # Sidebar for selecting which Stack Overflow user&#39;s data is presented sidebarLayout( sidebarPanel( textInput(&quot;user_id&quot;, &quot;Select a Stack Overflow user ID:&quot;, &quot;1845650&quot;) ), # Show a plot of a wordcloud of the user&#39;s answer-tags mainPanel( plotOutput(&quot;word_cloud&quot;) ) ) ) # Define server logic required to obtain data from stack-overflow and draw a # wordcloud server &lt;- function(input, output) { stack_data &lt;- reactive( stackr::stack_users(input[[&quot;user_id&quot;]], &quot;top-tags&quot;), ) output$word_cloud &lt;- renderPlot( make_word_cloud(stack_data()) ) } # Run the application shinyApp(ui = ui, server = server) "],["meeting-videos-5.html", "6.8 Meeting Videos", " 6.8 Meeting Videos 6.8.1 Cohort 1 Meeting chat log 00:05:16 Maya Longhi: Hello 00:12:32 Russ Hyde: Hi 00:13:03 Russ Hyde: I&#39;m just checking my screen share looks OK. Could you tell me if you can read the text on my rstudio instance 00:14:30 Russ Hyde: Is the text too pale? 00:14:46 Morgan Grovenburg: No, I can read it 00:14:53 Russ Hyde: Thanks 00:16:45 Morgan Grovenburg: I couldn&#39;t figure out how to use `bslib::bs_theme_preview()`, will you be showing that today? 00:17:50 Russ Hyde: I can do if you like 00:19:48 Morgan Grovenburg: Yes, please! Really, I just need see code that runs it 00:30:02 Layla Bouzoubaa: @sham, There’s a JavaScript for R book! 00:30:21 shamsuddeen: Oh, yah Layla 00:30:24 shamsuddeen: Thanks 00:30:31 Layla Bouzoubaa: https://book.javascript-for-r.com/ 00:30:32 Morgan Grovenburg: https://book.javascript-for-r.com/ 00:38:15 Federica G: line has gone ?! 00:38:26 Diamantis: lost the sound but still can see the shared screen 01:05:55 Layla Bouzoubaa: Sham, Bootstrap is a framework that combines html/js/css that can customized 01:06:06 shamsuddeen: ok 01:06:11 shamsuddeen: Thanks Layla 01:07:00 Layla Bouzoubaa: Like the buttons and stuff in shiny are following bootstrap guidelines (ie the shape, look etc) but you can customize them 01:07:12 shamsuddeen: ok 01:08:39 Layla Bouzoubaa: I just discovered this book btw: https://engineering-shiny.org/ . Ch.18.3.3 talks about external css files that may clarify your question on adding “www/“, sham 01:17:51 shamsuddeen: Oh, Thanks Layla. I got it 01:21:47 Federica G: Thanks ! 01:22:27 shamsuddeen: Thanks 01:22:38 Morgan Grovenburg: Thank you Russ! 01:24:22 Anne Hoffrichter: Thanks Russ! 6.8.2 Cohort 2 Meeting #1 video: Meeting #1 chat log 00:07:02 shane: one sec, dog wants to go see his mom ha 00:07:32 shane: Kevin, your volume is a little low like it was last week 01:06:06 shane: team, I unfortunately have to drop. Thank you everyone for the discussion, and thanks to Ryan for presenting and for the great info! If we do end up bleeding into a second session on this, I would definitely be down to be there. Have a great evening! Meeting #2 video: Meeting #2 chat log 00:21:58 shane: https://rstudio.github.io/thematic/ 00:25:03 Collin Berke: https://bootswatch.com/ 00:28:50 Conor Tompkins: &quot;This works because, at plot time, thematic grabs CSS styles from the plot(s) HTML container (via shiny::getCurrentOutputInfo())1 and uses that info to set new R styling defaults.&quot; 00:28:56 Conor Tompkins: From https://rstudio.github.io/thematic/articles/auto.html#shiny 00:31:15 Collin Berke: Not sure how this relates, but here is the link to the `theme_set()` function I referenced: https://ggplot2.tidyverse.org/reference/theme_get.html 00:46:41 Collin Berke: You can also see the object here: https://gallery.shinyapps.io/095-plot-interaction-advanced/ 00:50:48 Collin Berke: Here&#39;s some more about subsetting list objects. Check out this chapter from Advanced R: https://adv-r.hadley.nz/subsetting.html 01:13:14 Ryan Metcalf: https://www.osti.gov/servlets/purl/1115145 6.8.3 Cohort 3 Meeting chat log LOG "],["graphics-and-shiny.html", "Chapter 7 Graphics and Shiny", " Chapter 7 Graphics and Shiny Follow this link to the presentation for this chapter: "],["meeting-videos-6.html", "7.1 Meeting Videos", " 7.1 Meeting Videos 7.1.1 Cohort 1 Meeting chat log 00:09:09 Russ Hyde: Hi everyone. 00:09:19 Layla Bouzoubaa: 👋🏼 00:36:50 priyanka gagneja: thanks this is awesome .. i had been looking to make this kind of progress bar .. I tired a few things but they were not so pretty 00:37:28 Russ Hyde: The website for waiter is really sweet: https://waiter.john-coene.com/#/ 00:48:16 Andrew Bates: https://stackoverflow.com/questions/44112000/move-r-shiny-shownotification-to-center-of-screen 00:50:27 Russ Hyde: There might be other notification approaches: https://github.com/dreamRs/shinypop 7.1.2 Cohort 2 Meeting chat log 00:21:58 shane: https://rstudio.github.io/thematic/ 00:25:03 Collin Berke: https://bootswatch.com/ 00:28:50 Conor Tompkins: &quot;This works because, at plot time, thematic grabs CSS styles from the plot(s) HTML container (via shiny::getCurrentOutputInfo())1 and uses that info to set new R styling defaults.&quot; 00:28:56 Conor Tompkins: From https://rstudio.github.io/thematic/articles/auto.html#shiny 00:31:15 Collin Berke: Not sure how this relates, but here is the link to the `theme_set()` function I referenced: https://ggplot2.tidyverse.org/reference/theme_get.html 00:46:41 Collin Berke: You can also see the object here: https://gallery.shinyapps.io/095-plot-interaction-advanced/ 00:50:48 Collin Berke: Here&#39;s some more about subsetting list objects. Check out this chapter from Advanced R: https://adv-r.hadley.nz/subsetting.html 01:13:14 Ryan Metcalf: https://www.osti.gov/servlets/purl/1115145 7.1.3 Cohort 3 Meeting chat log LOG "],["user-feedback.html", "Chapter 8 User Feedback", " Chapter 8 User Feedback Validation: informing user, if inputs are invalid Notification: sending general messages to user Progress bars: informing user about progress of time consuming operations Confirmation/undo: giving the user a choice and extra security, when performing dangerous operations "],["validation.html", "8.1 Validation", " 8.1 Validation 8.1.1 Validating input giving feedback with the shinyFeedback package UI: add useShinyFeedback() ui &lt;- fluidPage( shinyFeedback::useShinyFeedback(), numericInput(&quot;n&quot;, &quot;n&quot;, value = 10), textOutput(&quot;half&quot;) ) Server: use feedback(), feedbackWarning(), feedbackDanger(), and feedbackSuccess() –&gt; example app 8.1.2 Cancelling execution with req() req() checks for required values before allowing a reactive producer to continue. Without req() the complete reactive graph is computed (even without user input): ui &lt;- fluidPage( selectInput(&quot;language&quot;, &quot;Language&quot;, choices = c(&quot;&quot;, &quot;English&quot;, &quot;Maori&quot;)), textInput(&quot;name&quot;, &quot;Name&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { greetings &lt;- c( English = &quot;Hello&quot;, Maori = &quot;Ki ora&quot; ) output$greeting &lt;- renderText({ paste0(greetings[[input$language]], &quot; &quot;, input$name, &quot;!&quot;) }) } Using req(): server &lt;- function(input, output, session) { greetings &lt;- c( English = &quot;Hello&quot;, Maori = &quot;Ki ora&quot; ) output$greeting &lt;- renderText({ req(input$language, input$name) paste0(greetings[[input$language]], &quot; &quot;, input$name, &quot;!&quot;) }) } 8.1.3 req() and validation ui &lt;- fluidPage( shinyFeedback::useShinyFeedback(), textInput(&quot;dataset&quot;, &quot;Dataset name&quot;), tableOutput(&quot;data&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ req(input$dataset) exists &lt;- exists(input$dataset, &quot;package:datasets&quot;) shinyFeedback::feedbackDanger(&quot;dataset&quot;, !exists, &quot;Unknown dataset&quot;) req(exists, cancelOutput = TRUE) get(input$dataset, &quot;package:datasets&quot;) }) output$data &lt;- renderTable({ head(data()) }) } Check out this app: https://hadley.shinyapps.io/ms-require-cancel/ 8.1.4 Validate output validate(message) stops execution of the rest of the code and instead displays message in any downstream outputs ui &lt;- fluidPage( numericInput(&quot;x&quot;, &quot;x&quot;, value = 0), selectInput(&quot;trans&quot;, &quot;transformation&quot;, choices = c(&quot;square&quot;, &quot;log&quot;, &quot;square-root&quot;) ), textOutput(&quot;out&quot;) ) server &lt;- function(input, output, session) { output$out &lt;- renderText({ if (input$x &lt; 0 &amp;&amp; input$trans %in% c(&quot;log&quot;, &quot;square-root&quot;)) { validate(message = &quot;x can not be negative for this transformation&quot;) } switch(input$trans, square = input$x ^ 2, &quot;square-root&quot; = sqrt(input$x), log = log(input$x) ) }) } "],["notifications.html", "8.2 Notifications", " 8.2 Notifications Use showNotification(), if there is no problem, but you want the user to know what is happening. show a transient notification that automatically disappears after a fixed amount of time show a notification when a process starts and remove it when the process ends update a single notification with progressive updates 8.2.1 Transient notifications ui &lt;- fluidPage( actionButton(&quot;goodnight&quot;, &quot;Good night&quot;) ) server &lt;- function(input, output, session) { observeEvent(input$goodnight, { showNotification(&quot;So long&quot;) Sys.sleep(1) showNotification(&quot;Farewell&quot;) Sys.sleep(1) showNotification(&quot;Auf Wiedersehen&quot;) Sys.sleep(1) showNotification(&quot;Adieu&quot;) }) } –&gt; example app 8.2.2 Removing on completion Show the notification when the task starts, and remove the notification when the task completes. Set duration = NULL and closeButton = FALSE so that the notification stays visible until the task is complete Store the id returned by showNotification(), and then pass this value to removeNotification() (&amp; on.exit()) server &lt;- function(input, output, session) { data &lt;- reactive({ id &lt;- showNotification(&quot;Reading data...&quot;, duration = NULL, closeButton = FALSE) on.exit(removeNotification(id), add = TRUE) read.csv(input$file$datapath) }) } 8.2.3 Progressive updates multiple calls to showNotification() –&gt; multiple notifications capture id from first call, use it in subsequent calls ui &lt;- fluidPage( tableOutput(&quot;data&quot;) ) server &lt;- function(input, output, session) { notify &lt;- function(msg, id = NULL) { showNotification(msg, id = id, duration = NULL, closeButton = FALSE) } data &lt;- reactive({ id &lt;- notify(&quot;Reading data...&quot;) on.exit(removeNotification(id), add = TRUE) Sys.sleep(1) notify(&quot;Reticulating splines...&quot;, id = id) Sys.sleep(1) notify(&quot;Herding llamas...&quot;, id = id) Sys.sleep(1) notify(&quot;Orthogonalizing matrices...&quot;, id = id) Sys.sleep(1) mtcars }) output$data &lt;- renderTable(head(data())) } "],["progress-bars.html", "8.3 Progress bars", " 8.3 Progress bars good for long-running tasks you need to be able to divide the big task into a known number of small pieces that each take roughly the same amount of time 8.3.1 Shiny Use withProgress() and incProgress() ui &lt;- fluidPage( numericInput(&quot;steps&quot;, &quot;How many steps?&quot;, 10), actionButton(&quot;go&quot;, &quot;go&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { withProgress(message = &quot;Computing random number&quot;, { for (i in seq_len(input$steps)) { Sys.sleep(0.5) incProgress(1 / input$steps) } runif(1) }) }) output$result &lt;- renderText(round(data(), 2)) } Check out this app: https://hadley.shinyapps.io/ms-progress 8.3.2 Waiter waiter package uses an R6 object ui &lt;- fluidPage( waiter::use_waitress(), numericInput(&quot;steps&quot;, &quot;How many steps?&quot;, 10), actionButton(&quot;go&quot;, &quot;go&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { # Create a new progress bar waitress &lt;- waiter::Waitress$new(max = input$steps) # Automatically close it when done on.exit(waitress$close()) for (i in seq_len(input$steps)) { Sys.sleep(0.5) # increment one step waitress$inc(1) } runif(1) }) output$result &lt;- renderText(round(data(), 2)) } –&gt; example app 8.3.3 Spinners also use the waiter() package instead of Waitress –&gt; Waiter ui &lt;- fluidPage( waiter::use_waiter(), actionButton(&quot;go&quot;, &quot;go&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { waiter &lt;- waiter::Waiter$new() waiter$show() on.exit(waiter$hide()) Sys.sleep(sample(5, 1)) runif(1) }) output$result &lt;- renderText(round(data(), 2)) } Check out this app: https://hadley.shinyapps.io/ms-spinner-1 You can use Waiter for specific outputs, which will make the code simpler: ui &lt;- fluidPage( waiter::use_waiter(), actionButton(&quot;go&quot;, &quot;go&quot;), plotOutput(&quot;plot&quot;), ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { waiter::Waiter$new(id = &quot;plot&quot;)$show() Sys.sleep(3) data.frame(x = runif(50), y = runif(50)) }) output$plot &lt;- renderPlot(plot(data()), res = 96) } Check out this app: https://hadley.shinyapps.io/ms-spinner-2 –&gt; example app for more spinners "],["confirming-and-undoing.html", "8.4 Confirming and undoing", " 8.4 Confirming and undoing for potentially dangerous actions, like deleting things 8.4.1 Explicit confirmation create a dialog box with modalDialog() modal_confirm &lt;- modalDialog( &quot;Are you sure you want to continue?&quot;, title = &quot;Deleting files&quot;, footer = tagList( actionButton(&quot;cancel&quot;, &quot;Cancel&quot;), actionButton(&quot;ok&quot;, &quot;Delete&quot;, class = &quot;btn btn-danger&quot;) ) ) ui &lt;- fluidPage( actionButton(&quot;delete&quot;, &quot;Delete all files?&quot;) ) server &lt;- function(input, output, session) { observeEvent(input$delete, { showModal(modal_confirm) }) observeEvent(input$ok, { showNotification(&quot;Files deleted&quot;) removeModal() }) observeEvent(input$cancel, { removeModal() }) } 8.4.2 Undoing an action More like waiting some time before acually performing the task and giving the user time to stop the action before it’s actually happening. –&gt; example app "],["meeting-videos-7.html", "8.5 Meeting Videos", " 8.5 Meeting Videos 8.5.1 Cohort 1 Meeting chat log 00:07:05 Russ Hyde: Hello everyone. Welcome to the Mastering Shiny Bookclub for Chapter 7: Graphics 00:08:22 Andrew Bates: https://engineering-shiny.org/ 00:35:25 Russ Hyde: For zooming into a ggplot in shiny: https://shiny.rstudio.com/gallery/plot-interaction-zoom.html 00:41:16 Layla Bouzoubaa: It works better in my opinion than basic ggplot 00:41:20 Layla Bouzoubaa: Since its interactive 00:41:49 Jessica Mukiri: https://plotly-r.com/ 8.5.2 Cohort 2 Meeting chat log 00:30:42 Ryan Metcalf: https://cran.r-project.org/web/packages/shinyFeedback/shinyFeedback.pdf 00:37:14 Ryan Metcalf: https://shiny.rstudio.com/articles/req.html#:~:text=req%20is%20short%20for%20%E2%80%9Crequire,means)%2C%20it%20will%20stop. 00:37:21 Ryan Metcalf: As you can see, dataset uses the req function, and the outputs don&#39;t do any checking. Unlike using return(NULL), when you use req to check your preconditions, a failure not only stops the current calculation (the dataset reactive expression, in this case) but also any callers on the call stack. In this case, if the user has not chosen a dataset, then output$plot and output$table both stop upon calling dataset(). 00:52:54 Kevin Gilds: https://tidydatabykwg57.shinyapps.io/ACLOlderAmericansProfile/ 8.5.3 Cohort 3 Meeting chat log LOG "],["uploads-and-downloads.html", "Chapter 9 Uploads and Downloads", " Chapter 9 Uploads and Downloads Learning objectives: Learn how to include file upload/download functionality into a Shiny application Implement the key UI components required to provide uploading/downloading functionality in an app Implement the key server components required to provide uploading/downloading functionality in an app Describe how the the UI and server elements fit together to provide this functionality Develop an app that validates the user’s input from an upload Observe examples where uploading/downloading functionality is applied within a simple Shiny application "],["file-uploads.html", "9.1 File uploads", " 9.1 File uploads 9.1.1 UI To upload a file use fileInput(id, label). Some other arguments are: multiple - can multiple files be uploaded at once? accept - what file types are accepted? (character vector) file extension: .csv, .tsv, .rds MIME type: application/JSON, image/png one of: audio/*, video/*, image/* Use ?fileInput in console to learn more 9.1.2 Server In the server, we work with a data frame with a special structure. There are 4 columns: name - name of the file on user’s computer size - file size in bytes. Default 5 MB; adjust with shiny.maxRequestSize option. type - MIME type of the file datapath - file path on the server. Temporary. "],["uploading-data.html", "9.2 Uploading data", " 9.2 Uploading data There are 2 things to note about uploading a data set. Use req(input$file) to make sure file is uploaded before code runs. Use accept argument to fileInput() to limit input types. browser doesn’t always enforce, so make sure to validate() Example of uploading a data set and validating file type (from book): ui &lt;- fluidPage( fileInput(&quot;file&quot;, NULL, accept = c(&quot;.csv&quot;, &quot;.tsv&quot;)), numericInput(&quot;n&quot;, &quot;Rows&quot;, value = 5, min = 1, step = 1), tableOutput(&quot;head&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ req(input$file) ext &lt;- tools::file_ext(input$file$name) switch(ext, csv = vroom::vroom(input$file$datapath, delim = &quot;,&quot;), tsv = vroom::vroom(input$file$datapath, delim = &quot;\\t&quot;), validate(&quot;Invalid file; Please upload a .csv or .tsv file&quot;) ) }) output$head &lt;- renderTable({ head(data(), input$n) }) } 9.2.1 Observe this in action Check out the app-upload.R example 9.2.2 Use a break-point to observe what’s going on here Add a breakpoint before the switch() function. Examine input$upload Examine input$file$datapath object Examine ext Import data in the interactive debugger data &lt;- reactive({ req(input$upload) ext &lt;- tools::file_ext(input$upload$name) #&gt; Add a breakpoint here switch(ext, csv = vroom::vroom(input$upload$datapath, delim = &quot;,&quot;), tsv = vroom::vroom(input$upload$datapath, delim = &quot;\\t&quot;), validate(&quot;Invalid file; Please upload a .csv or .tsv file&quot;) ) }) "],["downloads.html", "9.3 Downloads", " 9.3 Downloads 9.3.1 UI For file downloads, use downloadButton(id, label) or downloadLink(id, label). Customize the appearance with the class or icon arguments. 9.3.2 Server In the server, use downloadHandler(filename, content). There are only 2 arguments, both are functions. filename - no arguments. Returns file name as a string. content(file) - one argument (file). Path to save the file. output$download &lt;- downloadHandler( filename = function() { paste0(input$dataset, &quot;.csv&quot;) }, content = function(file) { write.csv(data(), file) } ) "],["downloading-data.html", "9.4 Downloading data", " 9.4 Downloading data Diagram of data download functionality We can allow the user to download a file containing data based on their exploration of an application. provide functionality to download a tab separated file (e.g., .csv; .tsv) provide functionality to download any type of content (e.g., png) 9.4.1 Observe this in action Check out the app-download-data.R example "],["downloading-reports.html", "9.5 Downloading reports", " 9.5 Downloading reports Diagram of report download functionality We can allow the user to download a report based on their exploration of an application. parameterized R Markdown is a good way to do this potential parameters - filters, simulation parameters specify parameters in YAML header of R Markdown document key idea - call rmarkdown::render() from content argument of downloadHandler() 9.5.1 Observe this in action Check out the app-download-report.R example 9.5.2 Some tips &amp; tricks when including report download functionality: .Rmd renders in working directory so copy file temporary directory before rendering. .Rmd renders in current R process so consider running in separate session with e.g. callr package. "],["meeting-videos-8.html", "9.6 Meeting Videos", " 9.6 Meeting Videos 9.6.1 Cohort 1 9.6.2 Cohort 2 Meeting chat log 00:51:00 Ryan Metcalf: https://github.com/royfrancis/shinyapp_calendar_plot/blob/master/app.R 00:54:23 Ryan Metcalf: https://pandoc.org/ 9.6.3 Cohort 3 Meeting chat log LOG "],["dynamic-ui.html", "Chapter 10 Dynamic UI", " Chapter 10 Dynamic UI Learning objectives: Learn how to add dynamics to a Shiny app to be able to see interactive changes to potentially automate command functions for more complex visualizations. At the end of this chapter, you will be able to understand what is a dynamic user interface, and what are the functions to update, hide or make visible and render the changes made interactively from UI to the server output. Introduction 1 - Updating inputs 2 - Dynamic visibility 3 - Creating UI with code Conclusions "],["introduction-2.html", "10.1 Introduction", " 10.1 Introduction This chapter based on Dynamic UI is made to addressing the user interface by updating the server outcome. There are three main sections, all of them relating to automated functions, able to dynamically change the output passing through parallel commands between the UI and the Server. What is a dynamic user interface? How to create dynamic user interfaces? One way to do this is changing the UI using code run in the Server function, and by modifying inputs and outputs to see dynamic changes in the app. "],["updating-inputs.html", "10.2 Updating inputs", " 10.2 Updating inputs Three are the key techniques for creating dynamic user interface: 1 - update functions 2 - tabsetPanel() 3 - uiOutput() and renderUI() In this first part of the Dynamic UI chapter we will see how to pass from a basic structure to a more complicate one by adding dynamics to the output of the app, calling the “updating functions”. As we know the basic structure of a Shiny app is made of a UI (user interface) and a Server. The first example is the User Interface and Server basic structure for updating the app. ############################################ # ui &lt;- fluidPage( # [id]Input(), # actionButton() # ) ############################################# # server &lt;- function(input, output, session) { # observeEvent(input$... , { # update[id]Input(inputId = ... , ... = input$... ) # }) # ... # } 10.2.1 Update functions The Update function allows you to modify the control after it has been created with a series of [id]Input and update[id]Input, as shown below: # [id]Input() # textInput() # ui # update [....] Input() # updateTextInput() # server # numericInput() # update [....] Input() # updateNumericInput() #------------------------------------- # selectInput() # update [....] Input() # updateSelectInput() # sliderInput() # update [....] Input() # updateSliderInput() Hierarchical, Freezing and Circular references Other considerations need to be done when requesting the app to update following an interactive input request made by the user. For example, the selection of natural hierarchy in the data is one of them, and it is important to create a user interface that allows updating the input maintaining stability while dynamically generating changes across multiple categories. Further considerations involve establishing priorities with the application of key features such as freezing Reactive Inputs, a provided feature to freeze part of the inputs when expected a series of changes and so for establishing priorities and visually summarize data correctly. # [id]Input() # tableOutput() # observeEvent() # update[id]Input() The function update[id]Input() only affects all outputs and observers that have run, for this reason, the freezing function would let you hierarchically updating all your inputs before displaying it. # [id]Input() # [some]Output() # observeEvent() # freezeReactiveValue() “freezing” the input # update[id]Input() The last consideration for this section is to circularity as seen in many apps, it is created when requested for making simultaneous changes recursively. In other words, it is seen in apps when updating the input, automatically another input is created in the function of the first one. Under this condition, the cycle can create an recursive loop on the current value of the input bringing it to run again and again in circularity. How the “Action button” reset the input A simple example of the use of this command is the Reset button. It is one of the clearest examples of what is meant with making dynamic changes. When the user interactively intervenes on the app making a choice, then the “reset” button makes it easy to reset the parameters back to their initial value. # [id]Input() # actionButton() # observeEvent() # update[id]Input() # [id]Input() # actionButton() # observeEvent() # updateActionButton() A simple use of the reset input button is shown in this example: Spring temperature generally varies on average between 19 and 25 C° degrees, let’s set an average value of 21 C° as reset point. ui &lt;- fluidPage( sliderInput(&quot;temperature&quot;, &quot;Spring temperature&quot;, 21, min = 19, max = 25), actionButton(&quot;reset&quot;, &quot;Reset&quot;) ) server &lt;- function(input, output, session) { observeEvent(input$reset,{ updateSliderInput(inputId = &quot;temperature&quot;, value = 21) }) } "],["dynamic-visibility.html", "10.3 Dynamic visibility", " 10.3 Dynamic visibility To show and hide parts of the UI dynamically and interactively. The tabsetPanel() is the second function for this chapter and it involves the visibility of part of the app. This second function is made to let the user show and/or hide some of the tabs set in the main panel. It is a technique that allows managing the appearance of the app with selecting visibility of the tabs as shown in the Tabsets section of the Shiny.rstudio.com guide’s page of the website. To enhance your app with features and the most wanted themes and as an example on how to set the visibility of a tab in your app, you can follow the steps found here: Gallery As an example here is shown how to switch between panels hiding one panel and showing the other with different content. library(shiny) ################## switcher ############################## ui &lt;- fluidPage( sidebarLayout( sidebarPanel( selectInput(&quot;controller&quot;, &quot;Show&quot;, choices = c(&quot;plot&quot;,&quot;summary&quot;)) ), mainPanel( tabsetPanel( id = &quot;switcher&quot;, type = &quot;hidden&quot;, tabPanelBody(&quot;plot&quot;, &quot;Plot&quot;), tabPanelBody(&quot;summary&quot;, &quot;Summary&quot;) ) ) ) ) server &lt;- function(input, output, session) { observeEvent(input$controller, { updateTabsetPanel(inputId = &quot;switcher&quot;, selected = input$controller) }) } Finally, the technique of the Conditional UI allows you to simulate different parameters to be set in the app. The tabsetPanel() is updated with input requests as a separate section with different types of [id]Input() and then embedded inside a fuller UI. Example of a chunk of code to be integrated in the UI: parameter_tabs &lt;- tabsetPanel( tabPanel(&quot;normal&quot;, numericInput(&quot;mean&quot;, &quot;mean&quot;, value = 1) ) ) ui &lt;- fluidPage( sidebarLayout( sidebarPanel( numericInput(&quot;n&quot;, &quot;Number of samples&quot;, value = 100), parameter_tabs # where to set the chunk of code ), mainPanel( plotOutput(&quot;hist&quot;) ) ) ) There are other options to use to be able to switch among different pages, an example of this is creating a wizard and using the switch_page() function, this will be shown in Chapter 18 - Functions as said in the book. "],["creating-ui-with-code.html", "10.4 Creating UI with code", " 10.4 Creating UI with code Create and modify the user interface while the app is running The last two functions uiOutput() and renderUI(), are for applying the technique of rendering the UI by setting the value of the new input to the current value of the existing control. This technique gives the developer the ability to create and modify the user interface while the app is running. uiOutput() act in the UI part of the app while renderUI() act in the Server. In this contest the function isolate() would be able to do this isolating a particular input, for more info see: Section 15.4.1 Final example to show the position of the two functions inside the UI and the Server: ############################################## ui &lt;- fluidPage( selectInput(&quot;type&quot;, &quot;type&quot;, c(&quot;slider&quot;, &quot;numeric&quot;)), uiOutput(&quot;numeric&quot;) ) ############################################### server &lt;- function(input, output, session) { output$numeric &lt;- renderUI({ if (input$type == &quot;slider&quot;) { sliderInput(&quot;n&quot;, &quot;n&quot;, value = 0, min = 0, max = 100) } else { numericInput(&quot;n&quot;, &quot;n&quot;, value = 0, min = 0, max = 100) } }) } #################################### In addition to the aforementioned functions more features are available as a composition of each other and many more, to allow the user for Multiple controls, Dynamic filtering and Dialog boxes. "],["conclusions.html", "10.5 Conclusions", " 10.5 Conclusions The dynamic of the UI can be appreciated by modification of the Server. Many compositions of the basic functions would let the user be able to interactively change the output to the desired visualization. "],["meeting-videos-9.html", "10.6 Meeting Videos", " 10.6 Meeting Videos 10.6.1 Cohort 1 10.6.2 Cohort 2 Meeting chat log 01:03:01 Ryan Metcalf: Reference for &lt;div&gt; tags: https://www.w3schools.com/tags/tag_div.ASP#:~:text=The%20tag%20defines%20a,inside%20the%20tag! 01:14:09 Conor Tompkins: barplot(c(1:2), col = &quot;red&quot;) 01:14:47 Conor Tompkins: barplot() automatically translates some strings to hex 10.6.3 Cohort 3 Meeting chat log LOG "],["bookmarking.html", "Chapter 11 Bookmarking", " Chapter 11 Bookmarking In brief, bookmarking addresses the issue of not being able to expose the current state of the app in its URL. Because of this, your Shiny app cannot be bookmarked or share a specific place with others. Learning objectives: Learn how to add bookmarkButton() to the UI Learn how to make the ui into a function and understand why it is necessary Learn how to use enableBookmarking='url' to the shinyApp() call At the end of this chapter, you will be able to enable bookmarking for your app. Introduction 1 - Modifying app to be bookmarkable 2 - Breaking down generated URLs 3 - Updating the URL/Storing a richer state 4 - Bookmarking challenges "],["introduction-3.html", "11.1 Introduction", " 11.1 Introduction This chapter introduces the concept of bookmarking a Shiny app so that a user can conveniently return to a specific state of the app. As it it stands, Shiny apps are single-page application (SPA) - a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server. This was one of the major drawbacks of employing Shiny apps. It is super inconvenient for you and your stakeholders to have to input the exact parameters in your application in order to produce the results you are trying to share. Now with bookmarking functionality, this problem is addressed. The rest of this chapter is going to illustrate concepts using the Shiny application proposed in Exercise #1, which displays the results of ambient::noise-simplex(). "],["modifying-app-to-be-bookmarkable.html", "11.2 Modifying app to be bookmarkable", " 11.2 Modifying app to be bookmarkable There are three main parts you must modify in a Shiny app in order for it to be bookmarkable: In the ui: make it a function In the ui: add the bookmarkButton() function In the shinyApp() call: include enableBookmarking = \"url\" ui &lt;- function(request) { fluidPage( sidebarLayout( sidebarPanel( sliderInput(&quot;omega&quot;, &quot;omega&quot;, value = 1, min = -2, max = 2, step = 0.01), sliderInput(&quot;delta&quot;, &quot;delta&quot;, value = 1, min = 0, max = 2, step = 0.01), sliderInput(&quot;damping&quot;, &quot;damping&quot;, value = 1, min = 0.9, max = 1, step = 0.001), numericInput(&quot;length&quot;, &quot;length&quot;, value = 100), bookmarkButton() ), mainPanel( plotOutput(&quot;fig&quot;) ) ) ) } shinyApp(ui, server, enableBookmarking = &quot;url&quot;) Making the ui a function Why? Because Shiny needs to be able to modify the input controls specified by the URL. Like arguments are passed within a normal R function as parameters to produce different outputs, the ui now needs to take in an argument (the URL) in order to return the app into a particular state. The URL holds information on the input parameters that needs to be changed, hence why the ui now needs to be a function. Adding the bookmarkButton() button to the app This function adds a button to the ui that captures the current values of all the input controls and generates a URL from it. More on this later. Adding enableBookmarking = \"url\" to the shinyApp() call This function ultimately puts the app together - the ui and the server. Adding this argument tells Shiny enable bookmarking and that the bookmark will be URL-encoded vs saved-on-server. More on this later "],["breaking-down-the-url.html", "11.3 Breaking down the URL", " 11.3 Breaking down the URL A default URL that is generated from within a Shiny app will look something like this: https://hadley.shinyapps.io/ms-bookmark-url/?_inputs_&amp;damping=0.966&amp;delta=1.25&amp;length=100&amp;omega=-0.54 OR http://127.0.0.1:4087/?_inputs_&amp;damping=0.997&amp;delta=1.37&amp;length=500&amp;omega=-0.9 But what do all these words and numbers mean? "],["updating-the-url.html", "11.4 Updating the URL", " 11.4 Updating the URL It is probably more convenient to have the URL just update itself whenever inputs change instead of having the user press button each time a state must be captured. This can be accomplished by wrapping information like input values and session information around an observer as such: observe({ reactiveValuesToList(input) session$doBookmark() }) The reactiveValuesToList(input) step does what you might expect as.list() to do in base R. It takes the reactive object, input and stores its values and dependencies in a list. The next step invokes the doBookmark() function from the session object. The session object is an environment that can be used to access information and functionality relating to the session. doBookmark() invokes the onBookmarked() callback function. FYI: a callback function is: a function that is passed as an argument to another function, to be “called back” at a later time. A function that accepts other functions as arguments is called a higher-order function, which contains the logic for when the callback function gets executed. 11.4.1 Storing a richer state URL bookmarking is simple and works everywhere you may want to deploy your Shiny app however, could become very long if you have a large number of inputs. If this is the case, it may be better to store your state on the server side. Shiny saves the state of your app in an .rds file on the server and generates a shorter and easier URL. To do this, you can simply change the enableBookmarking argument to be “server” instead of “url” shinyApp(ui, server, enableBookmarking = &quot;server&quot;) This generates URLs like this: http://127.0.0.1:4087/?_state_id_=0d645f1b28f05c97 The parameter in this instance is the state_id which corresponds to a directory in your working directory - shiny_bookmarks/0d645f1b28f05c97 ⚠️ Be sure to have a mechanism to routinely delete these directories. If your app requires bookmarking in a complex state and you do not delete these files, your app is going to take up more disk space and may start to lag. However, when you do delete these files, their corresponding URLs will also stop working. Just be sure to either send updated links to stakeholders or be mindful of the state of your app. "],["bookmarking-challenges.html", "11.5 Bookmarking Challenges", " 11.5 Bookmarking Challenges You must be extra cautious if your app relies on random number generation. Bookmarking will not generate the same results unless you make your process reproducible. Suggested solution: repeatable() : returns a wrapped version of a random data function that always uses the same seed when called. rnormA &lt;- repeatable(rnorm) Be sure to give your tabs an id when using tabsetPanel() Be cautious of what you share. If your app requires sensitive information, use setBookmarkExclude() somewhere in the server to ensure that they do not get included in your bookmark. setBookmarkExclude(c(\"secret1\", \"secret2\")) If you use reactiveValues() to manually manage our reactive state, use onBookmark() instead of onBookmarked(). This will be discussed more in Ch.16 and more details can be found in Advanced Bookmarking "],["meeting-videos-10.html", "11.6 Meeting Videos", " 11.6 Meeting Videos 11.6.1 Cohort 1 Meeting chat log 00:05:44 Russ Hyde: Hi everyone 00:05:52 Federica Gazzelloni: hello! 00:05:55 Russ Hyde: Welcome to another week of Mastering Shiny 00:06:19 Anne: Hello ;) 00:06:46 Russ Hyde: Is anyone interested in taking over looking after Maya Gans&#39; Mastering Shiny solutions manual? 00:06:56 Russ Hyde: https://rfordatascience.slack.com/archives/C012R356GLC/p1619539252081100 00:14:14 Robert Overman: SAS still is great when you need to plug and chug through a ton of data 00:22:54 Federica Gazzelloni: we cannot hear 00:23:03 Federica Gazzelloni: it is metallic 00:23:07 Federica Gazzelloni: to me still 00:28:35 Anne: could it be, that it has sth to do with the bookmark button? 00:31:44 Robert Overman: I could see this being really useful when you are testing an app, bc then you don&#39;t have to check all of your options every time you run it to check for errors 00:47:45 Federica Gazzelloni: Q - have some questions!!! 01:03:56 Federica Gazzelloni: thanks 11.6.2 Cohort 2 Meeting chat log 00:23:33 Conor Tompkins: From the docs: “reduce() is an operation that combines the elements of a vector into a single value. The combination is driven by .f, a binary function that takes two values and returns a single value” 01:09:29 Conor Tompkins: https://www.rplumber.io/ 01:09:37 Conor Tompkins: curl --data &quot;a=4&amp;b=3&quot; &quot;http://localhost:8000/sum&quot; 01:13:18 Conor Tompkins: https://cran.r-project.org/web/packages/curl/index.html 01:17:06 Conor Tompkins: https://xkcd.com/327/ 11.6.3 Cohort 3 Meeting chat log LOG "],["tidy-evaluation.html", "Chapter 12 Tidy evaluation", " Chapter 12 Tidy evaluation Learning objectives: TBD "],["slide-title.html", "12.1 Slide Title", " 12.1 Slide Title Slide contents "],["meeting-videos-11.html", "12.2 Meeting Videos", " 12.2 Meeting Videos 12.2.1 Cohort 1 Meeting chat log 00:01:39 Russ Hyde: Hi, am I audible? 00:09:57 Russ Hyde: Is the connection OK for everyone? 00:09:59 priyanka gagneja: I am not hearing you so well right now Robert 00:10:03 Andrew MacDonald: I might be losing sound? 00:10:08 Diamantis: I have sound issues, can&#39;t hear clearly 00:10:14 Andrew MacDonald: ah seems to be just on Rob? 00:10:35 andrew bates: I didn’t have sound. Had to call in. 00:11:00 Andrew MacDonald: In the meantime I’d just like to say hello! 00:11:09 Andrew MacDonald: This is my first time attending! 00:11:13 Russ Hyde: Hello Andrews 00:11:16 andrew bates: Welcome! 00:11:23 Andrew MacDonald: we have an abundance of Andrews :) 00:11:43 andrew bates: yeah! 00:12:01 Andrew MacDonald: I’m an ecologist who develops some shiny apps on a contract — a complete convert to the Way of Golem &amp; v excited for Colin’s appearance next week 00:12:48 Russ Hyde: Cool. I&#39;m really pleased we were able to get him to talk 00:13:07 priyanka gagneja: Nice to have you Andrew 00:14:00 Russ Hyde: Have any of you been attending the other bookclubs? 00:14:17 Andrew MacDonald: (there are other book clubs?) 00:14:18 priyanka gagneja: I do if my schedule allows 00:14:33 Anne Hoffrichter: I was in Advanced R bc 00:14:38 priyanka gagneja: Yes there are… and they are now increasing at crazy pace 00:14:41 andrew bates: Shameless self advocacy: if they’re looking for more Shiny devs, I’m looking :) 00:15:00 Russ Hyde: (ooo that was pretty neat) 00:15:46 Anne Hoffrichter: nice, i didn’t know you can run a shiny app from an rmd chunk! 00:16:23 Andrew MacDonald: that is a cool way to show this! I thought maybe that was the default from the group 00:17:00 Andrew MacDonald: could I ask what is the typical format here? do we begin with a summary and then discuss, or do we ask questions during Rob’s description? 00:17:42 Russ Hyde: Feel free to ask questions whenever. 00:19:55 Andrew MacDonald: &quot;foo&quot; &gt; 42 00:20:41 priyanka gagneja: @anne - Yeah you can add shiny code inside a Rmd. When you add shiny code and save it , it shows a ‘Run Document’ option instead of Run App. 00:28:42 Andrew MacDonald: okay I’ll be honest i’m just scared of &lt;&lt;- 00:29:06 priyanka gagneja: Less than 00:29:13 Andrew MacDonald: + 1 :) 00:31:51 Russ Hyde: I try to avoid &lt;&lt;- as well. 00:32:08 docksbox@pm.me: Yes 00:32:14 priyanka gagneja: Good point. So you mean as a crux of it , it would help the most for debugging ? 00:32:54 priyanka gagneja: If so, I am ready to start using it then 00:33:11 Russ Hyde: f &lt;- function(){counts= 0; function(){counts &lt;&lt;- counts + 1; message(counts)}} 00:33:22 Russ Hyde: g &lt;- f(); g(); g() 00:33:45 Russ Hyde: That should print 1 then 2 00:35:49 Russ Hyde: This is a really neat way to debug 00:36:17 Russ Hyde: (I meant Robert&#39;s example; not the hack I just posted) 00:37:01 Andrew MacDonald: laptop battery died! I’m back :) 00:41:28 Andrew MacDonald: tbh I strongly dislike the user-supplied data example! the word “data” is in there but i think it means.. three things? the input, the reactive expression, and the .data thing 00:42:18 Russ Hyde: Haha, I just wrote a chapter about good-names in R programming. Calling your data &#39;data&#39; is really not a good idea ... 00:42:42 Andrew MacDonald: exactly!!! 00:47:10 priyanka gagneja: Reminds me of days when I did parse eval :’( 00:51:13 Robert Overman: https://adv-r.hadley.nz/quasiquotation.html 00:52:15 Robert Overman: https://cran.r-project.org/web/packages/lazyeval/vignettes/lazyeval.html 00:57:39 Andrew MacDonald: very slick!!! 00:57:44 Andrew MacDonald: (get it) 00:59:38 Russ Hyde: select(df, A, B, C) vs d &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;); select(df, !!!d) 00:59:41 Russ Hyde: ? 01:00:28 priyanka gagneja: aah 01:00:37 priyanka gagneja: Yeah .. I think so .. named df 01:00:43 priyanka gagneja: Named vector sorry 01:01:04 Anne Hoffrichter: I gotta run, thanks Robert. See you all next week. 01:01:09 Robert Overman: final_colnames &lt;- data.frame( stringsAsFactors = FALSE, new_nm = c( &quot;A&quot;,&quot;B&quot;,&quot;C&quot; ), old_nm = c( &quot;X&quot;,&quot;Y&quot;,&quot;Z&quot; ) ) new_nm &lt;- final_colnames$new_nm %&gt;% unlist() old_nm &lt;- final_colnames$old_nm %&gt;% unlist() names(old_nm) &lt;- new_nm old_data &lt;- data.frame(X = 1, Y = 1, Z = 1) old_data %&gt;% select(!!!old_nm) 01:01:25 priyanka gagneja: gotcha 01:01:35 Andrew MacDonald: I must go as well — thank you everyone! nice to join this effort! 01:01:48 priyanka gagneja: I recall I did this recently .. n I wasn’t sure why one worked n not other one. 01:05:34 shamsuddeen: Thanks Robert 01:05:43 Andrew MacDonald: yeah thanks Rob! 12.2.2 Cohort 2 Meeting chat log 01:11:18 Ryan Metcalf: https://databank.worldbank.org/reports.aspx?source=global-economic-prospects 12.2.3 Cohort 3 Meeting chat log LOG "],["why-reactivity.html", "Chapter 13 Why reactivity?", " Chapter 13 Why reactivity? This chapter starts a new section of the book focused on reactivity. Yes, we have already learned about reactivity in earlier chapters. But in this section, we shift from an intuitive understanding based on applying reactivity to a formal understanding of the underlying theory. This chapter focuses on what reactivity, or reactive programming, is and why it is used in Shiny. "],["introduction-4.html", "13.1 Introduction", " 13.1 Introduction Shiny is “magic” specifically, it is “good” magic Shiny magic = “simple concepts combined in consistent ways” (vs. heuristics and special cases) "],["why-do-we-need-reactive-programming.html", "13.2 Why do we need reactive programming?", " 13.2 Why do we need reactive programming? What is reactive programming? “focuses on values that change over time, and calculations and actions that depend on those values” (Wikipedia) \"… reactive programming is … concerned with data streams and the propagation of changes (emphasis mine). Why reactive programming in Shiny? Shiny applications are interactive need something dynamic, unlike most R code want inputs &amp; outputs to stay in sync, while minimizing computation outputs and reactive expressions change if and only if their inputs change reactive programming -&gt; automatic updating/propagation of necessary changes 13.2.1 Why can’t you use variables? reactive programming: values that change over time. don’t variables change over time? variables don’t update automatically -&gt; no good temp_c &lt;- 10 temp_f &lt;- (temp_c * 9 / 5) + 32 temp_f #&gt; [1] 50 temp_c &lt;- 30 # temp_f not automatically updated temp_f #&gt; [1] 50 13.2.2 Why about functions? solves automatic updating problem doesn’t solve necessary computation problem temp_c &lt;- 10 temp_f &lt;- function() { message(&quot;Converting&quot;) (temp_c * 9 / 5) + 32 } temp_f() #&gt; Converting #&gt; [1] 50 # temp_f automatically updated temp_c &lt;- -3 temp_f() #&gt; Converting #&gt; [1] 26.6 # but does unnecessary computation (recomputes every time it&#39;s called) temp_f() #&gt; Converting #&gt; [1] 26.6 13.2.3 Event-driven programming before, Shiny would probably have used event-driven programming callback functions that run in response to events Ex: when button clicked, run function to process order can implement with R6 classes in R DynamicValue &lt;- R6::R6Class(&quot;DynamicValue&quot;, list( value = NULL, on_update = NULL, get = function() self$value, set = function(value) { self$value &lt;- value if (!is.null(self$on_update)) self$on_update(value) invisible(self) }, onUpdate = function(on_update) { self$on_update &lt;- on_update invisible(self) } )) temp_c &lt;- DynamicValue$new() temp_c$onUpdate(function(value) { message(&quot;Converting&quot;) temp_f &lt;&lt;- (value * 9 / 5) + 32 }) temp_c$set(10) #&gt; Converting temp_f #&gt; [1] 50 temp_c$set(-3) #&gt; Converting temp_f #&gt; [1] 26.6 event-driven programming solves problem of unnecessary computation but introduces a new problem very carefully track which inputs affect which computations hard to balance correctness vs. performance "],["reactive-programming-1.html", "13.3 Reactive programming", " 13.3 Reactive programming Reactive programming combines features of solutions we’ve seen so far. library(shiny) reactiveConsole(TRUE) # let&#39;s us use reactivity in console temp_c &lt;- reactiveVal(10) # create temp_c() # get #&gt; [1] 10 temp_c(20) # set temp_c() # get #&gt; [1] 20 temp_f &lt;- reactive({ message(&quot;Converting&quot;) (temp_c() * 9 / 5) + 32 }) temp_f() #&gt; Converting #&gt; [1] 68 # temp_f automatically updates temp_c(-10) temp_f() #&gt; Converting #&gt; [1] 14 # _and_ only computes when needed (don&#39;t see &quot;Converting&quot;) temp_f() #&gt; [1] 14 2 important properties of reactive expressions lazy. only does work when it’s called cached. saves last result -&gt; only does work on first call "],["a-brief-history-of-reactive-programming.html", "13.4 A brief history of reactive programming", " 13.4 A brief history of reactive programming spreadsheets! (VisCalc, 1979) not really studied academically until late 1990s 2010s -&gt; mainstream JavaScript UI frameworks: Knockout, Ember, Meteor now: React, Vue, Angular “reactive programming” is a general term. a lot of variablility in implementations and terminology "],["meeting-videos-12.html", "13.5 Meeting Videos", " 13.5 Meeting Videos 13.5.1 Cohort 1 Meeting chat log 00:01:19 Russ Hyde: Hi Everyone4 00:05:22 Russ Hyde: There are lots of chapters available if anyone would like to do a talk over the next few weeks. 00:05:37 Russ Hyde: Myself and Diamantis have the next couple of weeks planned. 00:06:16 Russ Hyde: But there&#39;s another chapter in the Reactivity section and all-but-one of the best-practices chapters available 00:06:50 Andrew MacDonald (he/him): hello everyone! : 00:06:53 Andrew MacDonald (he/him): :D 00:06:57 Russ Hyde: Those chapters take us up to mid-august. 00:07:13 Russ Hyde: And hopefully we&#39;ll all be expert shiny devs by then ... 00:09:14 Layla Bouzoubaa: I think I can do functions 00:09:19 Layla Bouzoubaa: *think* 00:10:44 Andrew MacDonald (he/him): I could be an understudy for ch16 :) 00:12:03 Russ Hyde: Layla, if you&#39;d like to do functions that would be great 00:12:33 Layla Bouzoubaa: Ok, I’ll go ahead and put it in the books 00:12:39 Layla Bouzoubaa: 6/29 00:12:55 Russ Hyde: :) 00:31:55 priyanka gagneja: Yeah {react log} 00:41:21 priyanka gagneja: @Layla - you might like this https://www.youtube.com/watch?v=8VjkatOf7Bs 00:48:49 Layla Bouzoubaa: Sorry everyone, I need to hop off. See you next week!! 00:49:31 priyanka gagneja: By Maya Gans :P 00:50:09 priyanka gagneja: Well .. I meant author of the book ‘javascript for R’ that AB brought up 00:52:08 Andrew MacDonald (he/him): this was a lighter chapter! touches on a lot of topics though 00:52:20 Andrew MacDonald (he/him): yeah thanks Andrew B., great summary 13.5.2 Cohort 2 Meeting chat log 00:43:00 Ryan Metcalf: Not sure if this quite answers the question of cache’ing variables in a Shiny Server -&gt; UI handshake. The comment I made was toward “threading”. The article does clarify the differences. https://www.digitalocean.com/community/tutorials/apache-vs-nginx-practical-considerations 13.5.3 Cohort 3 Meeting chat log LOG "],["the-reactive-graph-1.html", "Chapter 14 The reactive graph", " Chapter 14 The reactive graph This chapter gives an overview of the reactive graph and explains how reactive components are linked to each other. "],["quick-review-of-chapter-3-basic-reactivity.html", "14.1 Quick review of chapter 3 Basic reactivity", " 14.1 Quick review of chapter 3 Basic reactivity Imperative (most of R) vs declarative (shiny) Lazyness, only do what is necessary but could be difficult to debug The reactive graph notation: Execution order is not top to bottom but determined by the reactive graph Reactive expressions with reactive() Observers with observeEvent() "],["introduction-5.html", "14.2 Introduction", " 14.2 Introduction We begin with a simple example: ui &lt;- fluidPage( numericInput(&quot;a&quot;, &quot;a&quot;, value = 10), numericInput(&quot;b&quot;, &quot;b&quot;, value = 1), numericInput(&quot;c&quot;, &quot;c&quot;, value = 1), plotOutput(&quot;x&quot;), tableOutput(&quot;y&quot;), textOutput(&quot;z&quot;) ) server &lt;- function(input, output, session) { rng &lt;- reactive(input$a * 2) smp &lt;- reactive(sample(rng(), input$b, replace = TRUE)) bc &lt;- reactive(input$b * input$c) output$x &lt;- renderPlot(hist(smp())) output$y &lt;- renderTable(max(smp())) output$z &lt;- renderText(bc()) } "],["an-example.html", "14.3 An example", " 14.3 An example example from book example from reactlog "],["excercises.html", "14.4 Excercises", " 14.4 Excercises excercises in book Starting state is invalidated x1 = 1sec, x2 = 1sec, x3 = 2sec recursion "],["dynamism.html", "14.5 Dynamism", " 14.5 Dynamism ui &lt;- fluidPage( selectInput(&quot;choice&quot;, &quot;A or B?&quot;, c(&quot;a&quot;, &quot;b&quot;)), numericInput(&quot;a&quot;, &quot;a&quot;, 0), numericInput(&quot;b&quot;, &quot;b&quot;, 10), textOutput(&quot;out&quot;) ) server &lt;- function(input, output, session) { output$out &lt;- renderText({ # different reactive dependencies # a &lt;- input$a # b &lt;- input$b if (input$choice == &quot;a&quot;) { input$a } else { input$b } }) } "],["the-reactlog-package.html", "14.6 The reactlog package", " 14.6 The reactlog package reactlog::reactlog_enable() shiny::runApp(&quot;examples/14-the-reactive-graph/app.R&quot;) Ctrl+F3 or Cmd+F3 "],["summary-1.html", "14.7 Summary", " 14.7 Summary Key concepts that were covered in the chapter: How the reactive graph operates Invalidation cycle reactlog package "],["meeting-videos-13.html", "14.8 Meeting Videos", " 14.8 Meeting Videos 14.8.1 Cohort 1 14.8.2 Cohort 2 Meeting chat log 00:43:00 Ryan Metcalf: Not sure if this quite answers the question of cache’ing variables in a Shiny Server -&gt; UI handshake. The comment I made was toward “threading”. The article does clarify the differences. https://www.digitalocean.com/community/tutorials/apache-vs-nginx-practical-considerations Meeting chat log 00:37:01 Ryan Metcalf: Really good topic on Linked List in C++. The discussion was related to memory management. https://www.geeksforgeeks.org/data-structures/linked-list/ 00:45:12 Kevin Gilds: Reactive Values in Modules 00:45:39 Kevin Gilds: The inputs across across modules 00:47:27 Kevin Gilds: I will put some articles in the slack reactive values and modules 14.8.3 Cohort 3 Meeting chat log LOG "],["reactive-building-blocks.html", "Chapter 15 Reactive Building Blocks ", " Chapter 15 Reactive Building Blocks "],["learning-objectives-3.html", "15.1 Learning Objectives", " 15.1 Learning Objectives Building blocks: Reactive values Reactive expressions Observers How these tools are built from low-level functions: observe() isolate() How error messages / signal conditions move on reactive graph Shiny reactive values are built on reference-semantics "],["tools.html", "15.2 Tools", " 15.2 Tools Timed invalidation reactiveVal(some_value) and reactiveValues(a = abc, b = xyz) reactiveConsole(TRUE) {reactlog} "],["prerequisite-knowledge.html", "15.3 Prerequisite Knowledge", " 15.3 Prerequisite Knowledge Important properties of reactives: lazy cached (non-shiny) R things Reference- vs Copy-On-Modify semantics Error handling in R Functions that are used inside other functions (on.exit, match.args) Shiny examples and functions: difference between usage of (Section 3.5 and 3.6) eventReactive — you want the value and observeEvent — you want a side-effect shiny::req() (Chapter 8) shiny::reactiveTimer() (Section 3.5.1) "],["reactive-values.html", "15.4 Reactive Values", " 15.4 Reactive Values reactiveVal() reactiveValues() Holds Single value Multiple values (sim to list) Definition x &lt;- reactiveVal(1) x &lt;- reactiveValues(a = 1, b = 2) Getting syntax x() x$a Setting syntax x(2) x$a &lt;- 2 Class reactiveVal,reactive,function reactivevalues Reference semantics # Most of R uses copy-on-modify semantics f &lt;- function(x) { x$a = 2 x } x &lt;- list(a = 1, b = 2) f(x) # a new object is returned ## $a ## [1] 2 ## ## $b ## [1] 2 x # ... and the initial object is unchanged ## $a ## [1] 1 ## ## $b ## [1] 2 x1 &lt;- x2 &lt;- 1 x2 &lt;- 2 x1 ## [1] 1 x2 ## [1] 2 # R6 classes use reference semantics g &lt;- function(x) { x$a = 2 invisible(NULL) } Y &lt;- R6::R6Class(&quot;Y&quot;, list(a = 1, b = 2)) y &lt;- Y$new() y ## &lt;Y&gt; ## Public: ## a: 1 ## b: 2 ## clone: function (deep = FALSE) g(y) y ## &lt;Y&gt; ## Public: ## a: 2 ## b: 2 ## clone: function (deep = FALSE) y1 &lt;- y2 &lt;- Y$new() y2$a &lt;- 2 y1 ## &lt;Y&gt; ## Public: ## a: 2 ## b: 2 ## clone: function (deep = FALSE) y2 ## &lt;Y&gt; ## Public: ## a: 2 ## b: 2 ## clone: function (deep = FALSE) Both reactiveVal and reactiveValues have reference semantics # Exercise from the book # Run this interactively: l1 &lt;- reactiveValues(a = 1, b = 2) l2 &lt;- list(a = reactiveVal(1), b = reactiveVal(2)) # ... with a little extra l3 &lt;- reactiveVal(list(a = 1, b = 2)) # Getting l1$a l1[[&quot;a&quot;]] l2$a() l2[[&quot;a&quot;]]() l3()$a # Setting l1$a &lt;- 15 l2$a(15) # For l3, can&#39;t easily update just &#39;a&#39; l3(list(a = 15, b = 2)) # Exercise, run this interactively: # reactiveVal has reference semantics x &lt;- reactiveVal(1) y &lt;- x z &lt;- reactiveVal(1) x_init_address &lt;- pryr::address(x) x() y() z() x(2) x() y() z() pryr::address(x) == pryr::address(y) pryr::address(x) == pryr::address(z) pryr::address(x) == x_init_address "],["reactive-expressions-2.html", "15.5 Reactive Expressions", " 15.5 Reactive Expressions Example of a reactive expression from Section 8.2.2 (User Feedback, Notifications, Removing on completion) server &lt;- function(input, output, session) { data &lt;- reactive({ # Several lines of code can go inside this expression id &lt;- showNotification(&quot;Reading data...&quot;, duration = NULL, closeButton = FALSE) # the code inside `on.exit(...)` runs after this whole expression is evaluated on.exit(removeNotification(id), add = TRUE) # on success, this value is cached in `data()` read.csv(input$file$datapath) }) # ... some code that uses data() } 15.5.1 Errors Errors - are cached just like values - propagate through the reactive graph - different behaviour when they reach - output (error is displayed by the app) - observer (eg, observeEvent(); crashes the session; unless you use try/tryCatch) # Errors are cached # Run this in the console r &lt;- reactive(stop(&quot;Error occured at &quot;, Sys.time(), call. = FALSE)) r() Sys.sleep(2) r() # Errors propagate through the reactive graph # Exercise --- run this in the console ui &lt;- fluidPage( checkboxInput(&quot;error&quot;, &quot;error?&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { a &lt;- reactive({ if (input$error) { stop(&quot;Error!&quot;) } else { 1 } }) b &lt;- reactive(a() + 1) c &lt;- reactive(b() + 1) output$result &lt;- renderText(c()) } reactlog::reactlog_enable() shinyApp(ui, server) 15.5.2 on.exit() Where else do you see on.exit()? inside function bodies (eg, close this file once the function completes, reset the plotting options after making this graph) in testthat expressions In functions, for example, the code in on.exit() runs after all the rest of the code has run. It runs even if there are errors / warnings. You can have multiple calls to on.exit() inside a function (use add = TRUE, so a call doesn’t overwrite an earlier one) The expression in the definition of a reactive can be thought of as a function body (but with automatic caching / laziness): # Think of this: reactive({ do_something(x(), y()) }) # or eventReactive(triggers, {do_something(x(), y())}) # Like this: function() { do_something(x(), y()) } Because that’s basically what it is: # note that `fun &lt;- as_function(x)` line ... reactive ## function (x, env = parent.frame(), quoted = FALSE, ..., label = NULL, ## domain = getDefaultReactiveDomain(), ..stacktraceon = TRUE) ## { ## check_dots_empty() ## func &lt;- installExprFunction(x, &quot;func&quot;, env, quoted, wrappedWithLabel = FALSE) ## userExpr &lt;- fn_body(func) ## label &lt;- exprToLabel(userExpr, &quot;reactive&quot;, label) ## o &lt;- Observable$new(func, label, domain, ..stacktraceon = ..stacktraceon) ## structure(o$getValue, observable = o, cacheHint = list(userExpr = zap_srcref(userExpr)), ## class = c(&quot;reactiveExpr&quot;, &quot;reactive&quot;, &quot;function&quot;)) ## } ## &lt;bytecode: 0x7fc681df8080&gt; ## &lt;environment: namespace:shiny&gt; "],["observers-and-outputs.html", "15.6 Observers and Outputs", " 15.6 Observers and Outputs Reactives : cached and lazy Observers / Outputs : forgetful and eager Why does x() never run here? server &lt;- function(input, output, session) { x &lt;- reactive({ rnorm(10) }) } In the reactive graph, observers and outputs are the terminal nodes. If they were lazy, nothing would get done. Eagerness is infectious Observer: side-effect node (eg, write to file, send messages to console) usually defined using observeEvent() Output: as assigned to output$x &lt;- ... variable Both created using low-level function observe() # observers are eager y &lt;- reactiveVal(10) observe({ message(&quot;`y` is &quot;, y()) }) y(5) y(4) observe() doesn’t do something, it creates something # example from the book (I found this a bit confusing) x &lt;- reactiveVal(1) y &lt;- observe({ x() observe(print(x())) }) x(2) x(3) # y() reacts each time x() updates # each time y() reacts it adds a new observer node that reacts to x() # alternative example: # each time you change f, a new observer of g is added to the graph f &lt;- reactiveVal(1) g &lt;- reactiveVal(2) h &lt;- observe({ f() observe(print(g())) }) "],["isolating-code.html", "15.7 Isolating Code", " 15.7 Isolating Code observeEvent() and eventReactive allow you to access values in a reactive without taking a reactive dependency on them. How would you write a function to achieve that? From section 3.5.2 ui &lt;- fluidPage( fluidRow( column(3, numericInput(&quot;lambda1&quot;, label = &quot;lambda1&quot;, value = 3), numericInput(&quot;lambda2&quot;, label = &quot;lambda2&quot;, value = 5), numericInput(&quot;n&quot;, label = &quot;n&quot;, value = 1e4, min = 0), actionButton(&quot;simulate&quot;, &quot;Simulate!&quot;) ), column(9, plotOutput(&quot;hist&quot;)) ) ) server &lt;- function(input, output, session) { # x1 depends on `simulate`, `n` and `lambda1` # ... but only has a &quot;reactive dependency&quot; on `simulate` # ... sorry, ... what? x1 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda1) }) x2 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } So we’ve got new_reactive &lt;- eventReactive(dependOnThis, runThis) isolate(expression) is used. separates access from dependency executes the expression in a scope where the reactive values can be read (see ? isolate) reduces the time the reactive graph is invalidated Counting example from the book: r &lt;- reactiveValues(count = 0, x = 1) observe({ r$x # without the isolate() call, an infinite loop would occur r$count &lt;- isolate(r$count) + 1 }) r$x &lt;- 1 r$x &lt;- 2 r$count In eventReactive(dependOnThis, runThis), if you follow the code: - eventReactive calls bindEvent() - bindEvent (basically) calls reactive({dependOnThis; isolate(runThis)}) So - eventReactive(x, y) ===~ reactive(x, isolate(y)) - (and similarly) observeEvent(x, y) ===~ observe({x, isolate(y)}) "],["timed-invalidation-1.html", "15.8 Timed Invalidation", " 15.8 Timed Invalidation In section 3.5.1 server &lt;- function(input, output, session) { # timer is invalidated every 500ms # A) How is that possible? timer &lt;- reactiveTimer(500) x1 &lt;- reactive({ # ... hence, a new x1 and x2 are sampled each 500ms # B) What if sampling x1 took longer than 500ms? timer() rpois(input$n, input$lambda1) }) x2 &lt;- reactive({ timer() rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } invalidateLater(ms) allows the programmer to invalidate a node in the graph # Example, add a new random number to a sum once every 300ms sum &lt;- reactiveVal(0) observe({ invalidateLater(300) sum(isolate(sum()) + runif(1)) }) Note that invalidateLater runs from the time it is invoked. Combine it with on.exit() to ensure the node is invalidated a fixed-time after the node’s computation completes # e.g.: iterate: load a file, one second after you finished reading it data &lt;- reactive({ on.exit(invalidateLater(1000)) read.csv(&quot;data.csv&quot;) }) Additional tools reactivePoll and reactiveFileReader are built on invalidateLater Beware, the accuracy of timing may be affected by other processes "],["meeting-videos-14.html", "15.9 Meeting Videos", " 15.9 Meeting Videos 15.9.1 Cohort 1 Meeting chat log 01:04:02 Andrew MacDonald: I’m afraid i ahve to duck out early today. Please let me know if we still need somebody for next week! 01:04:09 Andrew MacDonald: thanks so much Russ et al! :D 01:04:18 docksbox@pm.me: thanks 01:04:40 docksbox@pm.me: are there any example apps ? 01:11:12 Layla Bouzoubaa: Thanks russ! Need to hop off! 01:14:19 Anne Hoffrichter: Thanks Russ! See you next week! 01:14:34 russ: Bye 15.9.2 Cohort 2 Meeting chat log 00:37:01 Ryan Metcalf: Really good topic on Linked List in C++. The discussion was related to memory management. https://www.geeksforgeeks.org/data-structures/linked-list/ 00:45:12 Kevin Gilds: Reactive Values in Modules 00:45:39 Kevin Gilds: The inputs across across modules 00:47:27 Kevin Gilds: I will put some articles in the slack reactive values and modules 15.9.3 Cohort 3 Meeting chat log LOG "],["escaping-the-graph.html", "Chapter 16 Escaping the graph", " Chapter 16 Escaping the graph Learning objectives: Learn how to escape the constraints of the reactive graph, the fundamental building blocks that allows Shiny to do just the work that is needed. At the end of this chapter, you will be able to understand what are the escaping of a reactive graph constrain, and what are the techniques to combine and connect a reactive graph applying manual controls over parts of the graph. Introduction 1 - Combine reactive values 2 - Connect the right side with the left side 3 - Create infinite loops Conclusions "],["introduction-6.html", "16.1 Introduction", " 16.1 Introduction This chapter based on Escaping the graph is made to addressing the reactive programming identifying the connections inside the app, and to use reactiveVal() and observe()/observeEvent() functions with the scope of applying manual controls over parts of the graph. The questions we are going to answer in these notes of the Mastering Shiny book by Hadley Wickham are: What’s happening inside the app? How to escape the constraints of the reactive graph? General usage of the reactiveVal() and observe()/observeEvent() functions is on a small scale, the interaction in bigger pieces results more complicated. A second suggestion is to keep the chunk of code isolated from the rest of the app so that the smallest possible number of observers modify the reactive value. To recap: Reactive programming is used to specify a graph of dependencies so that when an input changes, all related outputs are automatically updated. The reactive graph describes how inputs and outputs are connected, it is a powerful tool for understanding how your app works, and it’s useful to sketch the dependencies in your graph. Figure 16.1 shows the diagram of a general app. This is a basic visualization of the app connections, the connections between the reactive components are directional, with the arrows indicating the direction of reactivity. Figure 16.1: This basic diagram shows the main connections of the app "],["combine-reactive-values.html", "16.2 Combine reactive values", " 16.2 Combine reactive values A reactive graph shows the connections between the reactive components of the app, which are directional indicating the direction of reactivity; when a connection is not in use, the graph highlights it in grey color which means that the connection is invalidated. In this first part we learn how to combine reactive values which are escaping the graph and to do this we need to: 1 - modify the value of a reactive value 2 - use reactiveVal() or reactiveValues() functions 3 - combine them with observe() and observeEvent() in the server In particular, we will see how invalidation caused by the user might not be captured by the reactivity graph, and for this reason, it is said to be escaping the graph. An example is a request of changing the input made by the user, such as when using the reset button (made with an actionbutton()), which is not evidenced in the reactivity graph. The figure below shows an app with an actionButton(), the input value of the app changes but the reactivity graph stays the same. The reactive graph does not capture the connection between the unnamed observer and the input. reactlog_enable() ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;Your name here&quot;), actionButton(&quot;clr&quot;, &quot;Clear&quot;), textOutput(&quot;salutation&quot;) ) server &lt;- function(input, output, session) { # reactive function hello &lt;- reactive(paste0(&quot;Hello &quot;, input$name)) output$salutation &lt;- renderText(hello()) # observer observeEvent(input$clr, { updateTextInput(session, &quot;name&quot;, value = &quot;&quot;) }) } # shinyApp(ui = ui, server = server) To have an idea of what is happening inside the app we can sketch a graph of the connections with one of the {diagrammeR} functions for making flowcharts, such as the mermaid() function, so, we visually identify the connections related to the action of the reset button. Figure 16.2 Graph of the App Figure 16.2: Graph of the steps made by the app In this contest, the reactive graph represent a static connection that doesn’t show the recursivity of the reset. Another way to visualize and/or modify interactively the reactive graph is to change it directly, moving the parts aside and adjusting it as it is needed. "],["connect-the-right-side-with-the-left-side.html", "16.3 Connect the right side with the left side", " 16.3 Connect the right side with the left side In this section we combine reactiveValues() and observeEvent() Figure 16.3 Connecting the right side with the left side with directional arrow to show the missing connection Figure 16.3: This is the graph of the connection 16.3.1 Case Studies: One output modified by multiple inputs Accumulating inputs Pausing animations Anti-patterns "],["create-infinite-loops.html", "16.4 Create infinite loops", " 16.4 Create infinite loops Pausing animations In this example we use running reactive value and invalidateLater() function. This is the case when we can’t use observeEvent() but we need to used observe() and isolate() otherwise an infinite loop is created. ui &lt;- fluidPage( actionButton(&quot;start&quot;, &quot;start&quot;), actionButton(&quot;stop&quot;, &quot;stop&quot;), textOutput(&quot;n&quot;) ) server &lt;- function(input, output, session) { r &lt;- reactiveValues(running = FALSE, n = 0) observeEvent(input$start, { r$running &lt;- TRUE }) observeEvent(input$stop, { r$running &lt;- FALSE }) # we cannot use observeEvent() but observe() and isolate() observe({ if (r$running) { r$n &lt;- isolate(r$n) + 1 invalidateLater(250) } }) output$n &lt;- renderText(r$n) } # shinyApp(ui = ui, server = server) "],["conclusions-1.html", "16.5 Conclusions", " 16.5 Conclusions To conclude the reactive section of the book, I’d like to highlight how to enable one of the features provided by Shiny: the reactive graph. The reactive graph can be activated with the following commands: # reactlog::reactlog_enable() # or # options(shiny.reactlog = TRUE) Then you can access to it by clicking [Ctrl+F3] in Windows or [cmd + F3] in Mac while the app is running. This feature lets you see the structure of the connections made by the app. To mind is the escaping the graphs status, generated by previous conditions, which the reactive graph doesn’t take into consideration. For this reason, the main suggestion is to keep the conditions not reckon by the reactive graph feature on a small scale and use dedicated functions such as isolate() in combination with the recursivity of the app. In addition, the DiagrammeR package can be of help for you to see the missing piece of a connection in the structure, with the re-building of the reactive graph manually. 16.5.1 Resources: Experimental packages designed to explore “higher order” reactivity: reactlog rxtools More readings: Reactivity-overview Reactive programming mermaid "],["meeting-videos-15.html", "16.6 Meeting Videos", " 16.6 Meeting Videos 16.6.1 Cohort 1 16.6.2 Cohort 2 Meeting chat log 00:06:38 Kevin Gilds: pine phone 00:55:04 collinberke: https://www.collinberke.com/post/shiny-series-implementing-a-next-and-back-button/ 16.6.3 Cohort 3 Meeting chat log LOG "],["general-guidelines.html", "Chapter 17 General guidelines", " Chapter 17 General guidelines Big apps or big teams == New challenges Organisation Stability Maintainability "],["best-practices-section-of-the-book.html", "17.1 “Best practices” section of the book", " 17.1 “Best practices” section of the book Software engineering approach &amp; mindset (today’s chapter) Decomposition: into functions into modules Organisation into packages Stability Testing Security Performance "],["software-engineering.html", "17.2 Software engineering", " 17.2 Software engineering "],["code-organization.html", "17.3 Code organization", " 17.3 Code organization Empathy Code clarity Comments Function size Copy/Paste development Shiny: functions, modules "],["testing.html", "17.4 Testing", " 17.4 Testing What is a “test plan” Why does testing improve stability of an app Automation vs Manual Test types: Unit, Integration, Functional, Load …. Testing behaviour vs Testing components Can you have too many tests Can you have the wrong kind of tests "],["dependency-management.html", "17.5 Dependency management", " 17.5 Dependency management Reproducibility Environment management: {renv}, {packrat}, conda, docker, sessionInfo() Configuration: {config} Are there different reproducibility requirements for an app vs an analysis project? When should you have different configurations for an app? The filesystem as part of the environment "],["source-code-management.html", "17.6 Source code management", " 17.6 Source code management R uses svn: https://github.com/r-devel/r-svn#readme Did anyone use ‘git’ for the first time during the bookclub Related tools for version control-type things (tracking changes etc) Anyone using version-control systems other than git? What are the benefits and pain-points of git / github etc? "],["continuous-integration-continuous-deployment.html", "17.7 Continuous integration / Continuous deployment", " 17.7 Continuous integration / Continuous deployment Continuous integration for an app what things would you run? The bookclub as an example of continuous deployment "],["code-reviews.html", "17.8 Code reviews", " 17.8 Code reviews A fresh pair of eyes Speeds up learning (try contributing to an R package, and see how much you don’t yet know) Tricks to speed up code-review? Who should review who? Code review antipatterns? Alternatives / complements? pair programming "],["meeting-videos-16.html", "17.9 Meeting Videos", " 17.9 Meeting Videos 17.9.1 Cohort 1 Meeting chat log 00:06:04 russ: Hi everyone 00:06:14 russ: Hopefully we can have a discussion today 00:06:35 russ: I&#39;ve put some notes into the bookclub book, but haven&#39;thad them merged yet 00:12:38 andrew bates: https://blog.rstudio.com/2021/03/11/time-to-shiny/ 00:53:28 russ: cache? 00:53:52 andrew bates: https://shiny.rstudio.com/app-stories/weather-lookup-caching.html 01:04:33 Federica: thanks 17.9.2 Cohort 2 Meeting chat log 00:27:24 Kevin Gilds: https://www.rostrum.blog/2021/04/14/gha-readme/ 00:27:42 Kevin Gilds: Update README with Github actions 00:51:26 collinberke: https://www.youtube.com/watch?v=BEyiFVWaTtc&amp;list=PL3x6DOfs2NGjtn1_4BSX99R5wrLjK7XvY&amp;index=19 00:51:35 collinberke: https://www.youtube.com/watch?v=tWEa6JwlJ3c&amp;list=PL3x6DOfs2NGjtn1_4BSX99R5wrLjK7XvY&amp;index=21 17.9.3 Cohort 3 Meeting chat log LOG "],["functions.html", "Chapter 18 Functions", " Chapter 18 Functions Like in R analyses, functions can be useful in Shiny applications to improve the functionality/optimization and make your code cleaner for quicker debugging. Learning objectives: Learn how to use functional programming techniques to make many controls at once Understand how to use functions with reactives in the server Walk through some use cases where functions may be appropriate Outline 1 - File Organization 2 - UI functions 3 - Server functions "],["file-organization.html", "18.1 File Organization", " 18.1 File Organization Functions allow you to spread your code across multiple files this is where organization is 🔑 Make sure to have an R/ directory and in it, place large functions into their own script - R/myFunc.R Collections of smaller functions can go into 1 script, i.e. R/utils.R Shiny uses similar storing conventions as R packages "],["ui-functions.html", "18.2 UI Functions", " 18.2 UI Functions Functions are useful in reducing duplication CASE 1: converting multiple sliders to a function ui &lt;- fluidRow( sliderInput(&quot;alpha&quot;, &quot;alpha&quot;, min = 0, max = 1, value = 0.5, step = 0.1), sliderInput(&quot;beta&quot;, &quot;beta&quot;, min = 0, max = 1, value = 0.5, step = 0.1), sliderInput(&quot;gamma&quot;, &quot;gamma&quot;, min = 0, max = 1, value = 0.5, step = 0.1), sliderInput(&quot;delta&quot;, &quot;delta&quot;, min = 0, max = 1, value = 0.5, step = 0.1) ) TO: sliderInput01 &lt;- function(id) { sliderInput(id, label = id, min = 0, max = 1, value = 0.5, step = 0.1) } ui &lt;- fluidRow( sliderInput01(&quot;alpha&quot;), sliderInput01(&quot;beta&quot;), sliderInput01(&quot;gamma&quot;), sliderInput01(&quot;delta&quot;) ) Like functions in R analyses, functions in apps makes you app more readable and efficient if we need to change the behavior, we would only do it one place. CASE 2: customized dateInput with ... usWeekDateInput &lt;- function(inputId, ...) { dateInput(inputId, ..., format = &quot;dd M, yy&quot;, daysofweekdisabled = c(0, 6)) } Just a reminder on dateInput: dateInput( inputId, label, value = NULL, min = NULL, max = NULL, format = &quot;yyyy-mm-dd&quot;, startview = &quot;month&quot;, weekstart = 0, language = &quot;en&quot;, width = NULL, autoclose = TRUE, datesdisabled = NULL, daysofweekdisabled = NULL ) CASE 3: radio buttons to make iconRadioButtons &lt;- function(inputId, label, choices, selected = NULL) { names &lt;- lapply(choices, icon) values &lt;- if (is.null(names(choices))) names(choices) else choices radioButtons(inputId, label = label, choiceNames = names, choiceValues = values, selected = selected ) } 18.2.1 Functional Programming Using functions like map() may help reduce code further library(purrr) # pass the variables for the slider to the built function sliderInput01 vars &lt;- c(&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;delta&quot;) # returns a list of sliders sliders &lt;- map(vars, sliderInput01) # fluidRow unpacks the list to become children of the container ui &lt;- fluidRow(sliders) 18.2.2 UI as data Turning a UI structure into a data structure to have more varitey in inputs vars &lt;- tibble::tribble( ~ id, ~ min, ~ max, &quot;alpha&quot;, 0, 1, &quot;beta&quot;, 0, 10, &quot;gamma&quot;, -1, 1, &quot;delta&quot;, 0, 1, ) # function where arg names match the col names mySliderInput &lt;- function(id, label = id, min = 0, max = 1) { sliderInput(id, label, min = min, max = max, value = 0.5, step = 0.1) } # pmap to call mySliderInput over vars sliders &lt;- pmap(vars, mySliderInput) "],["server-functions.html", "18.3 Server Functions", " 18.3 Server Functions Long reactives should be put into a non-reactive functions outside the server easier to debug easier to tell what inputs were passed to a function vs a reactive expression CASE 1: Reading uploaded data server &lt;- function(input, output, session) { data &lt;- reactive({ req(input$file) ext &lt;- tools::file_ext(input$file$name) switch(ext, csv = vroom::vroom(input$file$datapath, delim = &quot;,&quot;), tsv = vroom::vroom(input$file$datapath, delim = &quot;\\t&quot;), validate(&quot;Invalid file; Please upload a .csv or .tsv file&quot;) ) }) output$head &lt;- renderTable({ head(data(), input$n) }) } To a function that extracts: # IN ITS OWN FILE load_file &lt;- function(name, path) { ext &lt;- tools::file_ext(name) switch(ext, csv = vroom::vroom(path, delim = &quot;,&quot;), tsv = vroom::vroom(path, delim = &quot;\\t&quot;), # validate works similarly to stop() outside of shiny validate(&quot;Invalid file; Please upload a .csv or .tsv file&quot;) ) } #---------------------------------------------- server &lt;- function(input, output, session) { data &lt;- reactive({ req(input$file) load_file(input$file$name, input$file$datapath) }) output$head &lt;- renderTable({ head(data(), input$n) }) } Note: generally better to keep reactive and non-reactive parts of app as separate as possible 18.3.1 Internal functions If the function needs to use input, output or session, it makes more sense to write the function directly in the server server &lt;- function(input, output, session) { switch_page &lt;- function(i) { updateTabsetPanel(input = &quot;wizard&quot;, selected = paste0(&quot;page_&quot;, i)) } observeEvent(input$page_12, switch_page(2)) observeEvent(input$page_21, switch_page(1)) observeEvent(input$page_23, switch_page(3)) observeEvent(input$page_32, switch_page(2)) } "],["meeting-videos-17.html", "18.4 Meeting Videos", " 18.4 Meeting Videos 18.4.1 Cohort 1 Meeting chat log 00:02:16 Federica Gazzelloni: hello 00:02:32 russ: Hi everyone 00:06:20 russ: A couple of the regulars apologised that they couldn&#39;t make it this week 00:30:10 Federica: https://shiny.rstudio.com/reference/shiny/1.6.0/radioButtons.html 00:34:44 Federica: 2.2.5 Limited choices There are two different approaches to allow the user to choose from a prespecified set of options: selectInput() and radioButtons(). 18.4.2 Cohort 2 Meeting chat log 00:27:24 Kevin Gilds: https://www.rostrum.blog/2021/04/14/gha-readme/ 00:27:42 Kevin Gilds: Update README with Github actions 00:51:26 collinberke: https://www.youtube.com/watch?v=BEyiFVWaTtc&amp;list=PL3x6DOfs2NGjtn1_4BSX99R5wrLjK7XvY&amp;index=19 00:51:35 collinberke: https://www.youtube.com/watch?v=tWEa6JwlJ3c&amp;list=PL3x6DOfs2NGjtn1_4BSX99R5wrLjK7XvY&amp;index=21 18.4.3 Cohort 3 Meeting chat log LOG "],["modules.html", "Chapter 19 Modules", " Chapter 19 Modules Modules are a kind of miniature app within a larger app. They isolate a particular group of inputs and outputs. Just like fully Shiny apps they have a UI and a server part. Modules help you break your big, complex app into smaller parts. This makes your Shiny code more readable, easier to debug, and reuseable. This last is particularly interesting, since you can use the same module among many different projects. This goes well after the previous chapter: most of the rationale for modules is the same as that for functions: break up your code, avoid repetition. 19.0.1 note about golem golem works hard to encourage you to use modules in all your apps. The Think-R team offers a slightly different set of conventions than the ones Hadley advocates. Mastering Shiny approach: histogramUI and histogramServer golem approach: mod_histogram_ui and mod_histogram_server golem::module_template(&quot;test&quot;, &quot;test.R&quot;, export = TRUE) "],["case-study-modules-to-make-a-histogram.html", "19.1 Case study – modules to make a histogram", " 19.1 Case study – modules to make a histogram the first exercise transforms this: ui &lt;- fluidPage( selectInput(&quot;var&quot;, &quot;Variable&quot;, names(mtcars)), numericInput(&quot;bins&quot;, &quot;bins&quot;, 10, min = 1), plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive(mtcars[[input$var]]) output$hist &lt;- renderPlot({ hist(data(), breaks = input$bins, main = input$var) }, res = 96) } shinyApp(ui = ui, server = server) to this: histogramUI &lt;- function(id) { tagList( selectInput(NS(id, &quot;var&quot;), &quot;Variable&quot;, choices = names(mtcars)), numericInput(NS(id, &quot;bins&quot;), &quot;bins&quot;, value = 10, min = 1), plotOutput(NS(id, &quot;hist&quot;)) ) } histogramServer &lt;- function(id) { moduleServer(id, function(input, output, session) { data &lt;- reactive(mtcars[[input$var]]) output$hist &lt;- renderPlot({ hist(data(), breaks = input$bins, main = input$var) }, res = 96) }) } histogramApp &lt;- function() { ui &lt;- fluidPage( histogramUI(&quot;hist1&quot;) ) server &lt;- function(input, output, session) { histogramServer(&quot;hist99&quot;) } shinyApp(ui, server) } "],["case-study-histogram-with-two-modules.html", "19.2 Case study: histogram with two modules", " 19.2 Case study: histogram with two modules library(shiny) # define the dataset input ---------------- # This is interesting, the function takes one id variable and works with that at the end datasetInput &lt;- function(id, filter = NULL) { names &lt;- ls(&quot;package:datasets&quot;) if (!is.null(filter)) { data &lt;- lapply(names, get, &quot;package:datasets&quot;) names &lt;- names[vapply(data, filter, logical(1))] } selectInput(NS(id, &quot;dataset&quot;), &quot;Pick a dataset&quot;, choices = names) } # server function returns a reactive datasetServer &lt;- function(id) { moduleServer(id, function(input, output, session) { # last thing returned reactive(get(input$dataset, &quot;package:datasets&quot;)) # gotta be a reactive }) } # selectVar module -------------------- find_vars &lt;- function(data, filter) { names(data)[vapply(data, filter, logical(1))] } # id is the only thing linking the two parts, Input and Server # This module creates, within namespace `id`, the reactive input var_they_wants selectVarInput &lt;- function(id) { selectInput(NS(id, &quot;var_they_wants&quot;), &quot;Variable&quot;, choices = NULL) } selectVarServer &lt;- function(id, data_chosen, filter = is.numeric) { moduleServer(id, function(input, output, session) { # WHEN the data changes -- that is, when the reactive value data() changes here... observeEvent(data_chosen(), { # ... THEN you should update Select Input with the numeric columns of the new dataframe updateSelectInput(session, &quot;var_they_wants&quot;, choices = find_vars(data_chosen(), filter)) ## NOTE this updating happens WIHTIN the namespace `id`. #### var_they_wants is updated with the LIST OF VARS THEY MIGHT WANT }) # input$var_they_wants -- # note that in the server function selectVarServer is called with the namespace id # once again returning the last thing and its reactive list( name = reactive(input$var_they_wants), value = reactive(data_chosen()[[input$var_they_wants]]) ) }) } Finally a third module to generate the histogram: histogramOutput &lt;- function(id) { tagList( numericInput(NS(id, &quot;bins&quot;), &quot;bins&quot;, 10, min = 1, step = 1), plotOutput(NS(id, &quot;hist&quot;)) ) } histogramOutput(&quot;foobar&quot;) # you can see where the input id is definied! I find it interesting to see how the module id is added to each component id in the HTML: &lt;div class=&quot;form-group shiny-input-container&quot;&gt; &lt;label class=&quot;control-label&quot; id=&quot;ff-bins-label&quot; for=&quot;ff-bins&quot;&gt;bins&lt;/label&gt; &lt;input id=&quot;ff-bins&quot; type=&quot;number&quot; class=&quot;form-control&quot; value=&quot;10&quot; min=&quot;1&quot; step=&quot;1&quot;/&gt; &lt;/div&gt; &lt;div id=&quot;ff-hist&quot; class=&quot;shiny-plot-output&quot; style=&quot;width:100%;height:400px;&quot;&gt;&lt;/div&gt; histogramServer &lt;- function(id, x, title = reactive(&quot;Histogram&quot;)) { # we like these checks at the beginning because they make better error messages stopifnot(is.reactive(x)) stopifnot(is.reactive(title)) moduleServer(id, function(input, output, session) { # browser() output$hist &lt;- renderPlot({ # whoa req is interesting.. checks for &quot;truthiness&quot;. but why the is.numeric first??? req(is.numeric(x())) # generate a req error just to see # req(is.character(x())) # input bins is assumed to be in the same namespace??? main &lt;- paste0(title(), &quot; [&quot;, input$bins, &quot;]&quot;) hist(x(), breaks = input$bins, main = main) }, # neat little point to control res of plot! res = 96) }) } # note that there is nothing in the code YET that makes these two things go together! except the name! histogramApp &lt;- function() { ui &lt;- fluidPage( sidebarLayout( sidebarPanel( datasetInput(&quot;data&quot;, is.data.frame), selectVarInput(&quot;var&quot;), ), mainPanel( histogramOutput(&quot;hist&quot;) ) ) ) server &lt;- function(input, output, session) { data &lt;- datasetServer(&quot;data&quot;) # reactive output captured here!! x &lt;- selectVarServer(&quot;var&quot;, data) histogramServer(&quot;hist&quot;, x = x$value, title = x$name) } shinyApp(ui, server) } histogramApp() "],["links-to-examples.html", "19.3 Links to examples", " 19.3 Links to examples Two versions of a simple app based on Tidy Tuesday data: * Shiny dashboard * golem with modules "],["meeting-videos-18.html", "19.4 Meeting Videos", " 19.4 Meeting Videos 19.4.1 Cohort 1 Meeting chat log 00:03:51 Federica Gazzelloni: hello! 00:13:14 Andrew MacDonald (he/him): https://github.com/jakelawlor/Volcano_Shiny_App 00:13:30 Andrew MacDonald (he/him): https://github.com/bios2/shiny_volcano_golem 01:03:04 Layla Bouzoubaa: Everyone, I need to hop off for a 1pm!! Thanks Andrew &lt;- NS(MacDonald)!! 01:03:18 Andrew MacDonald (he/him): yw! 01:03:47 Federica Gazzelloni: great! 19.4.2 Cohort 2 Meeting chat log 00:43:20 Kevin Gilds: https://github.com/bios2/shiny_volcano_golem 19.4.3 Cohort 3 Meeting chat log LOG "],["packages.html", "Chapter 20 Packages", " Chapter 20 Packages A package is just a lightweight set of conventions that unlock useful tools and workflows. "],["package-structure.html", "20.1 Package Structure", " 20.1 Package Structure The most simple package contains a DESCRIPTION file, housing metadata about the package (e.g. name and authors), and an R/ directory where .R files with function definitions live. Packages may also contain: A data/ directory, which holds reference datasets. A tests/ directory, which holds unit-tests that are used to ensure code works as expected. A vignettes/ directory, which holds long-form documentation. More! Read Hadley Wickham and Jenny Bryan’s amazing book, R Packages "],["benefits.html", "20.2 Benefits", " 20.2 Benefits In general, packages are beneficial for easily sharing your work. Packages provide a common organizational structure and offer improved workflow for loading and launching Shiny applications. "],["converting-an-existing-app.html", "20.3 Converting an existing app", " 20.3 Converting an existing app Call usethis::create_package(\"pick-a-path\"). This will create the package directory and skeleton. Remove any library() or require() calls, in favor of usethis::use_package(\"name\"). If your app uses modules, place related ones in individual .R files with usethis::use_r(\"module-category\"). Wrap core app inside a function and place within a .R file, e.g: greetingApp &lt;- function() { # define a user-interface with two elements: a text input with an ID, # label, and initial value; define a textOutput that # returns the input + greeting ui &lt;- fluidPage( textInput(inputId = &quot;nameInput&quot;, label = &quot;What is your name?&quot;, value = &quot;World&quot;), textOutput(&quot;name&quot;) ) # define the server side logic to manipulate the inputs server &lt;- function(input, output, session) { # define the output that concatenates the strings # &quot;Hello, &quot; + user input + &quot;.&quot; output$name &lt;- renderText({paste0(&quot;Hello, &quot;, input$nameInput, &quot;.&quot;)}) } # run the application shinyApp(ui, server) } Call devtools::load_all() and your function – greetingApp() to say hello to your package! "],["example-shinysurveys.html", "20.4 Example: shinysurveys", " 20.4 Example: shinysurveys shinysurveys provides easy-to-use, minimalistic code for creating and deploying surveys in Shiny. 20.4.1 Installation You can install {shinysurveys} via CRAN or GitHub and load it as follows: # Install released version from CRAN install.packages(&quot;shinysurveys&quot;) # Or, install the development version from GitHub remotes::install_github(&quot;jdtrat/shinysurveys&quot;) # Load package library(shinysurveys) 20.4.2 Demo A survey made with shinysurveys package might look like this: You can run a demo survey with the function shinysurveys::demo_survey(). 20.4.3 Let’s take a look! Live walk-through of creating an app with shinysurveys, how everything is packaged together, and more! "],["meeting-videos-19.html", "20.5 Meeting Videos", " 20.5 Meeting Videos 20.5.1 Cohort 1 Meeting chat log 00:16:10 Russ Hyde: Hi everyone 00:25:15 Robert Overman: In the past the app itself had to be put into the inst folder of the package 00:27:41 Robert Overman: So now being able to put it into the R folder makes things a lot easier, than having to do the odd reference back to runapp having it find the source file location to pull the server and ui 00:37:53 Jonathan Trattner: https://github.com/jdtrat/shinysurveys 20.5.2 Cohort 3 Meeting chat log LOG "],["testing-1.html", "Chapter 21 Testing ", " Chapter 21 Testing "],["learning-outcomes.html", "21.1 Learning outcomes", " 21.1 Learning outcomes Purpose of testing Different levels of test Balance: speed, fragility, coverage Reiterate: reactive code needs a reactive context "],["purpose-of-testing.html", "21.2 Purpose of testing", " 21.2 Purpose of testing Ensure new features don’t break existing code Ensure bugs only arise once Help you write new code Confidence, when updating R, packages, data To keep your colleagues happy So you can go on holiday "],["discussions.html", "21.3 Discussions", " 21.3 Discussions Don’t test the framework! Don’t test too early! Or do! Testing religions / approaches TDD: Test-driven development BDD: Behaviour-driven development TCR: Test &amp;&amp; Commit || Revert "],["four-levels-of-testing-for-shiny-apps.html", "21.4 Four levels of testing for shiny apps", " 21.4 Four levels of testing for shiny apps non-reactive functions input-value-driven updates to reactives &amp; outputs browser-driven tests visual output of the app So what does that separate: reactive from stateless behaviour UI-dependent and independent behaviour values from visuals "],["example.html", "21.5 Example", " 21.5 Example For this chapter, there is a sandpit project on github It is copied from the ER-injuries case-study app in Chapter 4 of Mastering Shiny. If you follow the tagged-releases it shows how to: Start with a working app Turn it into a package Make the package pass R CMD check Add tests for a non-reactive function Add a reactivity test for an app’s server-function Add a reactivity test for a module’s server-function In order to do each step, several structural changes to the app had to be made. Notes on how the app was modified and the tools that helped are in the README. We’ll start from a release that is a package, and passes R CMD check (aside from one issue re the size of the dataset that is embedded in the package) Release 0.2 To run the app, you run er_app() "],["using-testthat.html", "21.6 Using {testthat}", " 21.6 Using {testthat} App structure: Requires package structure ./tests/testthat.R ./tests/testthat/test-&lt;file&gt;.R ./tests/testthat/_snaps/&lt;file&gt;.md (optional) "],["recommended-workflow.html", "21.7 Recommended workflow", " 21.7 Recommended workflow create test files with usethis::use_test() Write code &amp; tests Run devtools::test_file() while getting something to work Capture new bugs in tests Run devtools::test_coverage_file() to show you’ve covered all your function Run devtools::test() to test the whole package "],["testing-non-reactive-functions.html", "21.8 Testing non-reactive functions", " 21.8 Testing non-reactive functions Release 0.4 Before modification, the app code looked like this: er_app &lt;- function() { # `injuries`, `products` and `population` are package-hosted datasets # They can be accessed by name (but R CMD check complains about you referring to undefined vars) injuries &lt;- get(&quot;injuries&quot;) products &lt;- get(&quot;products&quot;) population &lt;- get(&quot;population&quot;) prod_codes &lt;- stats::setNames(products$prod_code, products$title) ui &lt;- fluidPage(...) server &lt;- function(input, output, session) { selected &lt;- reactive({...}) output$diag &lt;- renderTable( selected() %&gt;% dplyr::count(.data[[&quot;diag&quot;]], wt = .data[[&quot;weight&quot;]], sort = TRUE) ) output$body_part &lt;- renderTable( selected() %&gt;% dplyr::count(.data[[&quot;body_part&quot;]], wt = .data[[&quot;weight&quot;]], sort = TRUE) ) output$location &lt;- renderTable( selected() %&gt;% dplyr::count(.data[[&quot;location&quot;]], wt = .data[[&quot;weight&quot;]], sort = TRUE) ) summary &lt;- reactive({...}) output$age_sex &lt;- renderPlot({...}) } shiny::shinyApp(ui, server) } 21.8.1 Workflow Add a function script use_r(\"count_by_weight\") Add a test script for the function use_test(\"count_by_weight\") This adds {testthat} infrastructure Add a few tests each tests a specific aspect of the functions behaviour Add enough code to get the tests running 21.8.2 A typical test GIVEN, WHEN, THEN ARRANGE, ACT, ASSERT test_that(&quot;it returns in count-sorted order&quot;, { df &lt;- tibble::tibble( x = c(rep(&quot;a&quot;, 5), rep(&quot;b&quot;, 3), rep(&quot;c&quot;, 9)), weight = 1 ) counted &lt;- count_by_weight(df, column = &quot;x&quot;) expect_equal( object = counted[[&quot;n&quot;]], expected = sort(counted[[&quot;n&quot;]]) ) }) "],["testing-reactivity.html", "21.9 Testing Reactivity", " 21.9 Testing Reactivity Release 0.5 Reactivity tests require: a server (the thing that runs); and a server function (the thing that’s ran) Tests require data we don’t want to use the data for the main app Structural changes: extract server function from er_app pass datasets (injuries, products, population) into the server as arguments But this wasn’t so simple server functions take arguments input, output, session how do we pass data into them? 21.9.1 Restructured app er_app &lt;- function() { # `injuries`, `products` and `population` are package-hosted datasets # They can be accessed by name (but R CMD check complains about you referring to undefined vars) injuries &lt;- get(&quot;injuries&quot;) products &lt;- get(&quot;products&quot;) population &lt;- get(&quot;population&quot;) ui &lt;- er_ui(products = products) server &lt;- make_er_server( injuries = injuries, products = products, population = population ) shiny::shinyApp(ui, server) } er_ui &lt;- function(products) {...} make_er_server &lt;- function(injuries, products, population) { function(input, output, session) { selected &lt;- reactive({...}) output$diag &lt;- renderTable(...) output$body_part &lt;- renderTable(...) output$location &lt;- renderTable(...) summary &lt;- reactive({...}) output$age_sex &lt;- renderPlot({...}) } } 21.9.2 shiny::testServer shiny::testServer(my_server_fn, {given__when__then}, args, session) sets up reactive context for shiny (server logic) tests use args to pass in args required in module-server session methods: session$setInputs(...) sets input values for use in testServer tests all inputs start as NULL (regardless of UI defaults) session$flushReact() setting a value doesn’t auto-update the reactive graph this function forces the reactive graph to update session$getReturned() to assess the value returned by a module session$elapse(millis = 300) advance the time 21.9.3 A typical reactivity test test_that(&quot;it updates tables when product-code changes&quot;, { # define test-data test_injuries &lt;- tibble::tibble(...) test_products &lt;- tibble::tibble(...) test_population &lt;- tibble::tibble(...) # pass test-data into the server function server &lt;- make_er_server( injuries = test_injuries, products = test_products, population = test_population ) # check that the &#39;selected&#39; table updates correctly testServer( server, { # no injuries with this code are present in the test data session$setInputs(code = 2345) expect_equal( selected(), test_injuries[integer(0), ] ) # the first and third entries in the injuries table have this code session$setInputs(code = 1234) expect_equal( selected(), test_injuries[c(1, 3), ] ) } ) }) "],["testing-reactivity-module-version.html", "21.10 Testing Reactivity: Module version", " 21.10 Testing Reactivity: Module version Testing the server function for a module is similar to for an app’s server function But you can pass in arguments 21.10.1 Structural changes Release 0.6 Need to define a module first UI before the change: er_ui &lt;- function(products) { prod_codes &lt;- ... ui &lt;- fluidPage( ..., # TODO: replace with `count_tables_ui()` fluidRow( column(4, tableOutput(&quot;diag&quot;)), column(4, tableOutput(&quot;body_part&quot;)), column(4, tableOutput(&quot;location&quot;)) ), ... ) ui } Server before the change: make_er_server &lt;- function(injuries, products, population) { function(input, output, session) { ... selected &lt;- reactive({...}) # TODO: replace with `count_tables_server(selected)` output$diag &lt;- renderTable( count_by_weight(selected(), &quot;diag&quot;) ) output$body_part &lt;- renderTable( count_by_weight(selected(), &quot;body_part&quot;) ) output$location &lt;- renderTable( count_by_weight(selected(), &quot;location&quot;) ) ... } } Introduced a module to create / render / format the count-tables: count_tables_ui &lt;- function(id) { ns &lt;- NS(id) fluidRow( column(4, tableOutput(ns(&quot;diag&quot;))), column(4, tableOutput(ns(&quot;body_part&quot;))), column(4, tableOutput(ns(&quot;location&quot;))) ) } count_tables_server &lt;- function(id, selected) { stopifnot(is.reactive(selected)) moduleServer(id, function(input, output, session) { diag &lt;- reactive( count_by_weight(selected(), &quot;diag&quot;) ) output$diag &lt;- renderTable(diag()) body_part &lt;- reactive( count_by_weight(selected(), &quot;body_part&quot;) ) output$body_part &lt;- renderTable(body_part()) location &lt;- reactive( count_by_weight(selected(), &quot;location&quot;) ) output$location &lt;- renderTable(location()) }) } 21.10.2 A typical module-reactivity test test_selected &lt;- tibble::tibble(...) expected_diag &lt;- tibble::tibble(...) test_that(&quot;tables display the counts correctly&quot;, { rx_selected &lt;- reactive(test_selected) testServer(count_tables_server, args = list(selected = rx_selected), { expect_equal( diag(), expected = expected_diag ) ... }) }) "],["testing-javascript.html", "21.11 Testing JavaScript", " 21.11 Testing JavaScript JS doesn’t work in testServer, because there’s no front-end in testServer Lot’s of functions used in the server() require JS (eg, insertUI) Need a browser for this ‘headless’ (can use a browser without manual-interaction) tools: shinytest (also puppeteer, selenium) Issues Slloooooowwww How to set up test-environment? (eg, custom databases) Flaky code? What if the html IDs change Can’t see internal state 21.11.1 shinytest::ShinyDriver Example: a reset button and updateTextInput app &lt;- shinytest::ShinyDriver(my_app()) app$setInput(name = \"value\") app$getValue(\"name\") app$sendKeys(name, keys) app$click(\"someID\") 21.11.2 Exercise for the reader What structural changes might be needed to use ShinyDriver-based end-to-end tests with the app? how do you pass in test data? "],["new-testthat-things-mentioned-in-the-chapter.html", "21.12 New testthat things mentioned in the chapter", " 21.12 New testthat things mentioned in the chapter expect_named(x, c(\"a\", \"b\", \"c\"), ignore.order = TRUE, ignore.case = FALSE) expect_setequal(x, y) expect_mapequal(x, y) expect_snapshot() Example: output for a UI function Expected value is stored in a file Update the expected value using testthat::snapshot_accept() "],["new-rstudio-mentioned-in-the-chapter.html", "21.13 New RStudio mentioned in the chapter", " 21.13 New RStudio mentioned in the chapter Add keyboard shortcuts: This did not work Shortcuts I hoped to add: [Ctrl + T] : devtools::test_file() [Ctrl + Shift + R] : devtools::test_coverage() [Ctrl + R] : devtools::test_coverage_file() Did anyone manage to do this? "],["other-interesting-things.html", "21.14 Other interesting things", " 21.14 Other interesting things one of the {tinytest} vignettes has “a few tips on packages and unit testing” two nice visualisations of the TDD cycle, and of TDD-until-the-feature’s ready are in “Test-Driven Development with Python” by Harry Percival. “R Packages” has a chapter about “testthat” The RStudio “shiny” website has three articles / webinars on testing in shiny chapter-section on testing in “Engineering Production-Grade Shiny Apps” "],["meeting-videos-20.html", "21.15 Meeting Videos", " 21.15 Meeting Videos 21.15.1 Cohort 1 21.15.2 Cohort 2 Meeting chat log 00:08:40 collinberke: https://github.com/collinberke/ga4WebDash 00:43:42 Kevin Gilds: https://rich-iannone.github.io/pointblank/ 00:50:43 Kevin Gilds: https://github.com/yonicd/covrpage 21.15.3 Cohort 3 Meeting chat log LOG "],["security.html", "Chapter 22 Security", " Chapter 22 Security Learning objectives: In this chapter, we learn how to prevent some undesired outputs caused by malicious attackers and/or misleading of inputs allowed by some function combinations. Introduction 1 - The security within your app: Data 2 - Compute resources 3 - Publishing on shinyapps.io Conclusions "],["introduction-7.html", "22.1 Introduction", " 22.1 Introduction In general: Who deploys the app is responsible for security between apps, and within your app But… it’s possible for a knowledgeable attacker to send values that are not expected… The advice about How to secure your device by attackers is not exhaustive. We need to search for alternative solutions to the impossibility of stopping an attacker from invading your app and its content. It is important not to underestimate combinations or substitutions of functions that would be preventable errors in chain creation. "],["the-security-within-your-app.html", "22.2 The security within your app", " 22.2 The security within your app Two main security actions: Shiny inputs use client-side validation such as data that is user-specific and need the user to authenticate before use Shiny server() code isolation; one user cannot see data from another user in a different session, the only exception is if caching is in use, more about this is specified in the last chapter of the book Data Sensitive data and passwords are the most targeted objectives of the attackers, for this reason is recommended to: do not store password in the source code of your app, but eventually, in a variable in the environment use a .yml file to store login credentials use .gitignore to include the appropriate files containing your authentication credentials Authentication and client-side validation There is more than one alternative to authenticate, first thing is that you need to add some kind of layer between the user interface and the Shiny server, i.e. a proxy Figure 22.1: proxy It will redirect the user to an authentication page, as in a login page, and once authenticated it will check whether the user is authorized, and then let them get access to the Shiny application. The following section lists five packages for configuration, authentication, and storage of login credentials. There are several options to choose from based on your need and design of the app. Packages: 1 - The first package suggested by the book is {config} package, it is used to manage environment specific configuration values. Figure 22.2: config package How to install config and all the other packages (substituting the package’s name where appropriate): install.packages(“config”) library(config) How to store the password in a file with config in practice ? The package makes easier to deploy content, and in this context is used to keep the credentials outside of the R script by saving them in the config.yml file while keeping it in the current working directory. YAML(tm) are type of files made for making easier international collaboration with a language which is both human readable and computationally powerful. An example of a .yml file is a config.yml file: default: uid: “my-name” pwd: “my-password” And to recall the information back from its directory: config &lt;- config::get(file = “conf/config.yml”) config\\(uid config\\)pwd 2 - Another interesting package, mentioned in the search-engine of “securing a Shiny app” is {auth0} package. Figure 22.3: auth0 package It is an identity provider, it offers a server where to store shiny apps as well as procedures for setting credentials at access. You need an account where to load your app and set up the credentials. _auth0.yml files can be created with the command use_auth0() which can be automatically positioned in the app.R directory and it is already filled with basic information: auth0::use_auth0() Here is the content of the _auth0.yml file: name: myApp remote_url: ’’ auth0_config: api_url: !expr paste0(‘https://’, Sys.getenv(‘AUTH0_USER’), ‘.auth0.com’) credentials: key: !expr Sys.getenv(“AUTH0_KEY”) secret: !expr Sys.getenv(“AUTH0_SECRET”) Then set up the keys using usethis::edit_r_environ(“project”) which adds a .Renviron file in your project directory for you to modify the content with AUTH0_USER = … AUTH0_KEY = … AUTH0_SECRET = … It adds a layer between Shiny and the user. And then you can retrieve the credentials using Sys.getenv() auth0::Sys.getenv(“AUTH0_USER”) This method is not exclusive of auth0package but is a recommended approach to use for storing Credentials inside Environment Variables even with other packages. 3 - A simple and secure authentication mechanism for single ‘Shiny’ applications is through {shinymanager} package. Figure 22.4: shinymanager package Here is a live demonstration of the potentiality of this package: Shiny-server shinyapps.io it follows with these authentication credentials: user: shiny / password: shiny user: shinymanager / password: shinymanager (Admin) In particular it provides a function to secure_app() in which to wrap the ui: Wrap your UI with secure_app ui &lt;- secure_app(ui, choose_language = TRUE) As well as in the server() with the following commands: secure_server() check_credentials() 4 - The {shinyauthr} package is very useful for providing key function to use. Figure 22.5: shinyauthr package These are the main functions which invisibly call JavaScript with the command shinyjs::useShinyjs() internally: loginUI() loginServer() logoutUI() logoutServer() It also provides a method for cookie-based automatic login, which means that the system can store the credentials for some time as established by the creator of the app. 5 - {sodium} package is software library for encryption, decryption, signatures, password hashing and more. Figure 22.6: sodium package Generally used in this contest to encrypt passwords with simple commands such as: user_name = “user_authr_1”, password = sodium::password_store(“pass_authr_1”) which releases the password in this format: password = &quot;pass_authr_1&quot; sodium::password_store(password) ## [1] &quot;$7$C6..../....R.F7Cd25kbnG51BcMeoxPw9qRDbi8Mgc4lVAwkP7OC5$fX7CUFvJ5UY2P1K1vbjpLOdgNNqkybXgBH3K3eIyW81&quot; hash &lt;- sodium::password_store(password) sodium::password_verify(hash, password) ## [1] TRUE Another suggestion by the book is to use: Figure 22.7: Kerberos Kerberos (/ˈkɜːrbərɒs/) is a computer-network authentication protocol developed by Massachusetts Institute of Technology (MIT) and classified as “Auxiliary Military Equipment” by the authorites for its capacities of Data Encryption Standard (DES). The development of the product followed with version updates and the implementation by other institutions included the Royal Institute of Technology in Sweden and the Stanford University made the system available outside the US with some limitations. Kerberos is available with RStudio Pro Products. In general what happens in an app when setting up login credentials is described below. In the ui you can use these commands for wrapping your code and build a module, while in the server() you should mind not to storage any form of credentials, but as said, storage them in a separate file (.xlm , .yml , .rds, .Renviron, …). The server() should include the eventReactive() function to check whether the user’s login and password are valid credentials, raising a silent validation error. server&lt;- function(input,output,session){ eventReactive() } Examples: 1 - In this example is shown for simplicity an application of the {shinyauthr}: the credentials are located inside the server(), they should be in a config.yml file and then retrieved for use. You may find yourself being prompted with something like this: Figure 22.8: Credentials library(shiny) # dataframe that holds usernames, passwords and other user data user_base &lt;- dplyr::tibble( user = c(&quot;user1&quot;, &quot;user2&quot;), password = c(&quot;pass1&quot;, &quot;pass2&quot;), permissions = c(&quot;admin&quot;, &quot;standard&quot;), name = c(&quot;User One&quot;, &quot;User Two&quot;) ) ui &lt;- fluidPage( # add logout button UI div(class = &quot;pull-right&quot;, # The HTML tag functions in Shiny, like div() and p() return objects that can be rendered as HTML shinyauthr::logoutUI( id = &quot;logout&quot;)), # add login panel UI function shinyauthr::loginUI( id = &quot;login&quot;), # setup table output to show user info after login tableOutput(&quot;user_table&quot;) ) server &lt;- function(input, output, session) { # call login module supplying data frame, # user and password cols and reactive trigger credentials &lt;- shinyauthr::loginServer( id = &quot;login&quot;, data = user_base, user_col = user, pwd_col = password, log_out = reactive(logout_init()) ) # call the logout module with reactive trigger to hide/show logout_init &lt;- shinyauthr::logoutServer( id = &quot;logout&quot;, active = reactive(credentials()$user_auth) ) output$user_table &lt;- renderTable({ # use req to only render results when credentials()$user_auth is TRUE req(credentials()$user_auth) # only run after a successful login credentials()$info }) } #shinyApp(ui = ui, server = server) When accessing an API or database in R, Shiny inputs use client-side validation and often requires to provide credentials such as a login name and password. 2 - Another example of Shiny inputs using client-side validation (input performed by JavaScript in the browser) where is possible for an attacker to send unexpected values is: secrets &lt;- list( a = &quot;my name&quot;, b = &quot;my birthday&quot;, c = &quot;my social security number&quot;, d = &quot;my credit card&quot; ) allowed &lt;- c(&quot;a&quot;, &quot;b&quot;) ui &lt;- fluidPage( selectInput(&quot;x&quot;, &quot;x&quot;, choices = allowed), textOutput(&quot;secret&quot;) ) An attacker can open up a JavaScript console in their browser and run Shiny.setInputValue(\"x\", \"c\") to see client data that are not allowed to see. To add a layer of security, in the server() is added the req() function, which ensure that values are available, and if any of the given values is not truthy, the operation is stopped by raising a “silent” exception. ?req() server &lt;- function(input, output, session) { output$secret &lt;- renderText({ req(input$x %in% allowed) # this function secrets[[input$x]] }) } # shinyApp(ui = ui, server = server) Finally, in case you want to skip the authentication step when testing the app: Use testthat::skip() to automatically skip tests that require authentication. "],["compute-resources.html", "22.3 Compute resources", " 22.3 Compute resources What about errors, holes, dangerous function combinations, selective characters such as special characters that are not recognizable by the system language? What can be done to prevent unexpected values from being used? Malicious attackers can: run any R code they want delete important files modify data send confidential data back to the user of the app You should never: source() an uploaded .R file rmarkdown::render() an uploaded .Rmd Mind: the combination of parse() and eval() as big warning sign for any Shiny app Danger: it is possible to ask R to execute arbitrary code inside a model formula Below are some examples of dangerous app chunks: 1 - This first example shows how the combination of parse() and eval() allows the user to insert only numeric values. server &lt;- function(input, output, session) { output$results &lt;- renderText({ eval(parse(text = input$code)) }) } 2 - Other kinds of possibilities for error chain generators are given by the model formula, the formula can executes an extra command print() lm(y ~ {print(“Hi!”); x}, data = df) #&gt; [1] “Hi!” 3 - Third warning comes from the {glue} package, the book in this case suggests to pay attention to use: glue::glue(“{title}-{print(‘Hi’); number}”) and suggests to substitute with glue_safe() which instead releases an error/warning: glue::glue_safe(“{title}-{print(‘Hi’); number}”) #&gt; Error in .transformer(expr, env): object ‘print(’Hi’); number’ not found 4 - In case of variable transformation, this is what can happen: Figure 22.9: https://xkcd.com/327/ The code to construct a SQL query with paste() could lead to flexibilities in code construction that would allow the addition of extra characters not warned or advised by any friendly error messages find_student &lt;- function(name) { paste0(&quot;SELECT * FROM Students WHERE name = (&#39;&quot;, name, &quot;&#39;);&quot;) } find_student(&quot;Hadley&quot;) ## [1] &quot;SELECT * FROM Students WHERE name = (&#39;Hadley&#39;);&quot; find_student(&quot;Robert&#39;); DROP TABLE Students; --&quot;) ## [1] &quot;SELECT * FROM Students WHERE name = (&#39;Robert&#39;); DROP TABLE Students; --&#39;);&quot; solution: use glue::glue_sql() con &lt;- DBI::dbConnect(RSQLite::SQLite(), &quot;:memory:&quot;) find_student &lt;- function(name) { glue::glue_sql(&quot;SELECT * FROM Students WHERE name = ({name});&quot;, .con = con) } find_student(&quot;Robert&#39;); DROP TABLE Students; --&quot;) ## &lt;SQL&gt; SELECT * FROM Students WHERE name = (&#39;Robert&#39;&#39;); DROP TABLE Students; --&#39;); "],["publishing-on-shinyapps.html", "22.4 Publishing on shinyapps.io", " 22.4 Publishing on shinyapps.io Security for your applications running on shinyapps.io: all access to the apps is over SSL; you can configure your app to require authentication before anyone accessing it; in addition, every account has its sub-directory structure as a double layer of security. "],["conclusions-2.html", "22.5 Conclusions:", " 22.5 Conclusions: Securing an app might require some extra work around all the information available as well as all the extra available packages and functions that can be used for authenticating and avoid the wrongful combination of functions/commands. This might be the case for apps containing sensitive information or for those one letting the users access restricted data. 22.5.1 Resources: SecuringShiny shinypassword Run as the authenticated user Securing Deployed Content Kerberos Kerberos with RStudio Pro Products Kerberos Authentication shinyapps.io security and compliance How does cryptography work? Extra Packages: config on github auth0 shinymanager keyring tips on how to use it storing sets of encrypted credentials in a local file rstudioapi secrets or cyphr packages for github secrets testthat sodium for cryptography rtweet rtweet more reading shinyauthr "],["meeting-videos-21.html", "22.6 Meeting Videos", " 22.6 Meeting Videos 22.6.1 Cohort 1 Meeting chat log 00:05:12 Russ Hyde: Hi everyone 00:13:52 Russ Hyde: Federica is taking us through the security chapter of Mastering Shiny 00:48:57 Russ Hyde: So who is using authentication on their apps? 22.6.2 Cohort 2 22.6.3 Cohort 3 Meeting chat log LOG "],["performance.html", "Chapter 23 Performance ", " Chapter 23 Performance "],["restaurant-shiny.html", "23.1 Restaurant Shiny", " 23.1 Restaurant Shiny Server =~ Restaurant User =~ Customer Request =~ Order R process =~ Chef To make each chef more efficient Identify any slow steps Brainstorm to make them faster To make the restaurant more efficient Hire more chefs Buy more restaurants "],["benchmarking.html", "23.2 Benchmarking", " 23.2 Benchmarking How does the app handle multiple users? 23.2.1 Tools shinyloadtest Run an app Record how you interact with the app shinycannon: rerun the session multiple times analyse the log of the reran sessions runApp(&quot;some_app.R&quot;) shinyloadtest::record_session(&quot;http://127.0.0.1:9876&quot;) # See &quot;./recording.log&quot; shinycannon ./recording.log http://127.0.0.1:9876 \\ --workers 10 \\ --loaded-duration-minutes 5 \\ --output-dir run1 library(shinyloadtest) df &lt;- load_runs(&quot;./run1&quot;) shinyloadtest_report(df, &quot;report.html&quot;) "],["profiling.html", "23.3 Profiling", " 23.3 Profiling Where is the app slow / memory-hungry? 23.3.1 Tools profvis The call stack and the “Flame graph” library(profvis) f &lt;- function() { pause(0.2) g() h() 10 } g &lt;- function() { pause(0.1) h() } h &lt;- function() { pause(0.3) } profvis::profvis(f()) Similar for {shiny}, but need explicit call to start the app (and close it with [Ctrl-C]) ui &lt;- fluidPage( actionButton(&quot;x&quot;, &quot;Push me&quot;), textOutput(&quot;y&quot;) ) server &lt;- function(input, output, session) { output$y &lt;- eventReactive(input$x, f()) } app &lt;- shinyApp(ui, server) profvis::profvis( shiny::runApp( app() ) ) Note that data downloads may not be tracked. "],["optimisation.html", "23.4 Optimisation", " 23.4 Optimisation 23.4.1 Cacheing bindCache cacheing of any reactive value or render function uses ‘cache keys’ keep them as simple as possible date/time-dependent results cache has fixed size scope (per session, or per process; in-memory or on-disk) r &lt;- reactive(slow_function(input$x, input$y)) %&gt;% bindCache(input$x, input$y) output$text &lt;- renderText(slow_function2(input$z)) %&gt;% bindCache(input$z) 23.4.2 Other Optimisations Do as little as possible Do your prep outside of the server Do your prep outside of shiny Use the fastest import method available Only do the slow stuff if requested Learn async programming "],["resources-3.html", "23.5 Resources", " 23.5 Resources https://rstudio.com/resources/rstudioconf-2019/shiny-in-production-principles-practices-and-tools/ https://rstudio.github.io/shinyloadtest/articles/analyzing-load-test-logs.html https://queue.acm.org/detail.cfm?id=2927301 https://adv-r.hadley.nz/perf-improve.html https://csgillespie.github.io/efficientR/ https://rstudio.com/resources/rstudioconf-2018/make-shiny-fast-by-doing-as-little-work-as-possible/ https://shiny.rstudio.com/articles/caching.html https://shiny.rstudio.com/app-stories/weather-lookup-caching.html "],["meeting-videos-22.html", "23.6 Meeting Videos", " 23.6 Meeting Videos 23.6.1 Cohort 1 Meeting chat log 00:07:09 Russ Hyde: Hi 00:45:54 Robert Overman: Are we having a session on shiny server? 01:01:58 docksbox@pm.me: Thanks! 01:04:51 docksbox@pm.me: Yes, sure 23.6.2 Cohort 2 23.6.3 Cohort 3 Meeting chat log LOG "],["wrap-up-session.html", "Chapter 24 Wrap up session ", " Chapter 24 Wrap up session "],["meeting-videos-23.html", "24.1 Meeting Videos", " 24.1 Meeting Videos 24.1.1 Cohort 1 Meeting chat log 00:17:47 Russ Hyde: my_input &lt;- function(label) { 00:18:06 Russ Hyde: fileInput(label, NULL, buttonLabel = &quot;Upload...&quot;)} 00:18:40 Russ Hyde: fludiPage(my_input(&quot;a1&quot;), my_input(&quot;a2&quot;)) 00:32:10 Federica Gazzelloni: https://themes.getbootstrap.com/ 00:52:28 Federica Gazzelloni: eparker12 app: https://github.com/eparker12/nCoV_tracker/blob/master/app.R 00:56:10 Russ Hyde: https://github.com/nz-stefan/commute-explorer-2 00:58:51 Federica Gazzelloni: https://github.com/Fgazzelloni/shiny_apps/blob/master/App-Covid19_Italy_map/app.R 24.1.2 Cohort 3 Meeting chat log LOG "],["up-and-running-with-git.html", "Chapter 25 Up and running with git", " Chapter 25 Up and running with git Learning objectives Understand what git is and how to use it in a basic workflow Understand what GitHub is and how to use it in a basic workflow Review the different git commands used in a basic workflow Apply git commands to complete a basic workflow Observe a basic workflow using RStudio’s Git GUI Observe a basic workflow using the terminal in RStudio "],["what-is-git.html", "25.1 What is git?", " 25.1 What is git? git is a version control system. Assists developers* when collaborating on big projects. *Data scientists and analysts have adapted it for their needs. Manages the set of files (i.e., a repository (or repo for short)) in a structured way. Two ways to think about git: It takes snapshots, catalogs, and assists in the documentation of changes to your files. It is like Microsoft Word’s “Track Changes” on steroids. "],["accessing-and-using-git.html", "25.2 Accessing and using git", " 25.2 Accessing and using git A myriad of ways are available to use git in your workflow (assuming git is installed on your computer). The two most common are: Using a Graphical User Interface (GUI) Client (you must install some of these) Examples can be found here. Built in Git window pane in RStudio Using terminal commands System terminal Rstudio terminal "],["example-using-the-built-in-rstudio-git-gui..html", "25.3 Example using the built in RStudio git GUI.", " 25.3 Example using the built in RStudio git GUI. Here’s an example of the Git window pane in Rstudio. Here’s an example of the git sub-menu in RStudio. "],["example-using-git-in-a-system-terminal.html", "25.4 Example using git in a system terminal", " 25.4 Example using git in a system terminal Here’s an example using a system terminal. Terminal is set up with oh my zsh running on a Mac Computer. 25.4.1 Example using git in RStudio’s terminal Here’s an example of using RStudio’s integrated terminal (Windows users might find this useful). This tab should be near the Console tab. If not, you may have to adjust your settings or open a new terminal. "],["what-is-github.html", "25.5 What is GitHub?", " 25.5 What is GitHub? GitHub is a hosting service for your projects. Think of it as DropBox, but much, much better ~Jenny Bryan, STAT 545 TAs, &amp; Jim Hester (Happy Git and GitHub for the useR) It’s a collaboration, project management, and social media platform. Provides many tools to improve/work on your project. 25.5.1 Other services like GitHub Bitbucket GitLab Although these services are different, the fundamentals are still the same across the platforms. "],["a-basic-workflow---pull-commit-and-push.html", "25.6 A basic workflow - pull, commit, and push", " 25.6 A basic workflow - pull, commit, and push There are many tools that git and GitHub provides. Just check out the Pro Git book. Let’s look at a basic, common workflow: tracking and documenting changes to our project. pull, commit, and push "],["personal-repo-workflow-step-by-step.html", "25.7 Personal repo workflow step-by-step", " 25.7 Personal repo workflow step-by-step Here’s a step-by-step visualization of the workflow. These are the common steps and there are many approaches to do what is explained here. Using these commands in the same steps might not matter. You will find yourself using similar patterns over and over, however. Pull, make changes, add, commit, push The commands you use and in what order you use them is based on the current state of the project. "],["personal-repo-workflow-alternative-view.html", "25.8 Personal repo workflow alternative view", " 25.8 Personal repo workflow alternative view Here’s the same workflow. It is just visualized a different way. "],["fork-clone-push-and-pull-workflow-collaboration.html", "25.9 Fork, clone, push, and pull workflow (collaboration)", " 25.9 Fork, clone, push, and pull workflow (collaboration) This diagram is from the Happy Git and GitHub for the useR book. This is how you can make changes to the bookclub’s review materials. It overviews the workflow when working with a forked repository. We will come back to this at a later time, once we start developing the app. 25.9.1 Some notes about these workflows They will not always run smoothly Errors and issues are inevitable (merge conflicts…ugh) Read the prompts and try to solve the issue, Google is your friend Git can be frustrating at times Don’t worry about being perfect Getting good takes practice "],["workflow-commands.html", "25.10 Workflow commands", " 25.10 Workflow commands The following are common commands to perform the previously discussed workflow in a terminal. git has many commands, each having multiple options to modify behavior. Want to know more, check out the Pro Git book. 25.10.1 Get Remote Repo/Update Local Repo git clone &lt;repo url&gt; (only needs to be run once*): pulls files into a directory (file) git pull: retrieves changes from the remote repo 25.10.2 View info about local files git branch: see what branch you are on locally. git status: see what files have changed locally. git diff: see specific changes in the files. 25.10.3 Stage and document changes git checkout &lt;branch name&gt;: change your branch if needed. git add &lt;file name&gt;: stage the file for documentation. git add -i: interactive module for staging. Great for when you have lots of files to commit. git commit: opens text editor to document changes. If vim opens: Press i (insert) &gt;&gt; add your subject line &gt;&gt; draft your message &gt;&gt; Esc &gt;&gt; :+x &gt;&gt; Enter. git commit -m &lt;message&gt;: Short version for drafting commit messages. 25.10.4 Push changes to remote repository git push: push changes to remote repo (GitHub) "],["demo-of-the-workflow.html", "25.11 Demo of the workflow", " 25.11 Demo of the workflow Workflow using the GUI Video will be added soon Workflow using the terminal Video will be added soon "],["other-resources-to-learn-more-about-git.html", "25.12 Other resources to learn more about git", " 25.12 Other resources to learn more about git Keep coming to this group, we will discuss more advanced topics surrounding the use of git Happy Git and GitHub for the useR Pro Git (free and available online) Learn git branching, the game How Does Git Work? (A more in-depth blog on git internals) @Tan in the R4DS Slack put together some videos. "],["meeting-videos-24.html", "25.13 Meeting Videos", " 25.13 Meeting Videos 25.13.1 Cohort 2 2021-07-21: Initial meeting, overview of git workflows. 2021-07-28: Demonstration using the RStudio terminal to perform git operations (Beginning of session). Meeting chat logs # Meeting 2021-07-21 00:01:07 Zaynaib Giwa, @zaynaib: Hello Collin 00:01:24 Collin Berke: Hello! I will jump in here shortly. 00:01:35 Ola: Hello Eileen 00:10:41 Conor Tompkins: Indexing the chapters at 0? Brave move lol 00:31:23 Ola: git bash for windows if you are a terminal person 00:32:24 Kevin Gilds: use both terminal and Rstudio gui-depends 00:32:41 Conor Tompkins: I use RStudio + GitHub.com. terminal if I need to delete old branches 00:34:56 Kevin Gilds: Linux! 00:35:07 Ola: windows has a terminal 00:35:29 Ola: https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab 00:35:37 Ola: here is the app for windows terminal its awesome 00:38:01 Ola: if you are windows and want to run a ubntu on it without dual booting https://docs.microsoft.com/en-us/windows/wsl/install-win10 00:43:37 Conor Tompkins: Azure is another one 01:00:08 Ola: If you do commit large files use git-lfs 01:00:33 Ola: https://git-lfs.github.com/ 01:06:16 Conor Tompkins: There is this channel in the slack: help-5-github_open_source 01:06:42 Sandra: Thanks 01:07:19 Maria C Ramos: Thank you! # Meeting 2021-07-28 00:15:20 Ola: you are on mute 00:30:25 Ola: it sounds like you need to setup your ssh key 00:30:27 Ola: https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent 00:31:11 Conor Tompkins: RStudio sort of combines git add and git commit. 00:36:19 Ola: yes 00:46:54 Conor Tompkins: It would be interesting to know whether you can use a port number below 1023. Those are reserved for specific uses 00:48:15 Ola: You can assign an application a port number. 00:48:58 Ola: There are some default ports for certain applications like postgres I think its like port 5410 … don&#39;t quote me on that 00:49:45 Ryan Metcalf: Many APIs utilize particular ports when communicating to different servers. Redis, Postgres, SQLServer, etc… 00:49:52 Ryan Metcalf: HTML by default is 80 or 8080. 00:50:17 Ryan Metcalf: SSH, FTP, SFTP, are 21, 22, 23, etc… 00:51:35 Eileen: Shiny:: cheat sheet 00:54:43 Ola: Maybe we should have a debugging zoom party one of these days "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
